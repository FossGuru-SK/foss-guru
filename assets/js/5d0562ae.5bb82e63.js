"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[3807],{6844:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"kits/java/Java OOP/Differences need to know/overloading-overriding","title":"Java Method Overloading vs. Method Overriding","description":"Learn the difference between method overloading and method overriding in java, which mainly involve method name, signature, parameters list and return type.","source":"@site/community/kits/java/Java OOP/Differences need to know/overloading-overriding.md","sourceDirName":"kits/java/Java OOP/Differences need to know","slug":"/kits/java/Java OOP/Differences need to know/overloading-overriding","permalink":"/foss-guru/community/kits/java/Java OOP/Differences need to know/overloading-overriding","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"overloading-overriding","title":"Java Method Overloading vs. Method Overriding","description":"Learn the difference between method overloading and method overriding in java, which mainly involve method name, signature, parameters list and return type.","sidebar_position":1},"sidebar":"community","previous":{"title":"Differences need to know","permalink":"/foss-guru/community/category/differences-need-to-know"},"next":{"title":"Java Encapsulation vs. Abstraction","permalink":"/foss-guru/community/kits/java/Java OOP/Differences need to know/encapsulation-abstraction"}}');var i=r(4848),s=r(8453);const o={id:"overloading-overriding",title:"Java Method Overloading vs. Method Overriding",description:"Learn the difference between method overloading and method overriding in java, which mainly involve method name, signature, parameters list and return type.",sidebar_position:1},d=void 0,a={},l=[{value:"\ud83e\udd39\u200d\u2642\ufe0f Method Overloading vs. Method Overriding in Java \ud83c\udfad",id:"\ufe0f-method-overloading-vs-method-overriding-in-java-",level:2},{value:"\ud83c\udd9a Method Overloading vs. Method Overriding",id:"-method-overloading-vs-method-overriding",level:2},{value:"\ud83c\udfad Method Overloading: The Shape-Shifting Trick",id:"-method-overloading-the-shape-shifting-trick",level:2},{value:"\ud83d\udd11 Rules of Method Overloading",id:"-rules-of-method-overloading",level:3},{value:"1\ufe0f\u20e3 Method Arguments Must Be Different",id:"1\ufe0f\u20e3-method-arguments-must-be-different",level:3},{value:"2\ufe0f\u20e3 Return Types Don&#39;t Matter (Only Parameters Do!)",id:"2\ufe0f\u20e3-return-types-dont-matter-only-parameters-do",level:3},{value:"3\ufe0f\u20e3 Exceptions Don\u2019t Count",id:"3\ufe0f\u20e3-exceptions-dont-count",level:3},{value:"\ud83c\udfc6 Method Overriding: The Rebel Child \ud83d\ude08",id:"-method-overriding-the-rebel-child-",level:2},{value:"\ud83d\udd11 Rules of Method Overriding",id:"-rules-of-method-overriding",level:3},{value:"1\ufe0f\u20e3 Method Arguments Must Be <strong>Exactly</strong> the Same",id:"1\ufe0f\u20e3-method-arguments-must-be-exactly-the-same",level:3},{value:"2\ufe0f\u20e3 Return Type Can Be a Subtype (But Not Different)",id:"2\ufe0f\u20e3-return-type-can-be-a-subtype-but-not-different",level:3},{value:"3\ufe0f\u20e3 Thrown Exception Can Be a Subtype",id:"3\ufe0f\u20e3-thrown-exception-can-be-a-subtype",level:3},{value:"4\ufe0f\u20e3 No Overriding Private, Static, or Final Methods",id:"4\ufe0f\u20e3-no-overriding-private-static-or-final-methods",level:3},{value:"5\ufe0f\u20e3 Overriding Method Cannot Reduce Access Scope",id:"5\ufe0f\u20e3-overriding-method-cannot-reduce-access-scope",level:3},{value:"\u2705 How to Verify Method Overriding",id:"-how-to-verify-method-overriding",level:2},{value:"\ud83c\udfaf Conclusion",id:"-conclusion",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Banner java icon",src:r(3390).A+"",width:"370",height:"364"})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-method-overloading-vs-method-overriding-in-java-",children:"\ud83e\udd39\u200d\u2642\ufe0f Method Overloading vs. Method Overriding in Java \ud83c\udfad"}),"\n",(0,i.jsx)(n.p,{children:"Java is like a magic show \ud83c\udfa9\u2728 when it comes to method overloading and overriding. They both play crucial roles in object-oriented programming, but they have very different tricks up their sleeves! Let\u2019s break them down with a bit of fun and, of course, easy-to-follow examples."}),"\n",(0,i.jsx)(n.p,{children:"And hey, if you're preparing for an interview, buckle up\u2014this is a popular Java question! \ud83c\udfaf"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-method-overloading-vs-method-overriding",children:"\ud83c\udd9a Method Overloading vs. Method Overriding"}),"\n",(0,i.jsx)(n.p,{children:"Here\u2019s a quick battle between the two:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Aspect"})}),(0,i.jsxs)(n.th,{children:[(0,i.jsx)(n.strong,{children:"Method Overloading"})," \ud83d\udee0"]}),(0,i.jsxs)(n.th,{children:[(0,i.jsx)(n.strong,{children:"Method Overriding"})," \ud83d\udd04"]})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Definition"})}),(0,i.jsxs)(n.td,{children:["Multiple methods in the ",(0,i.jsx)(n.strong,{children:"same class"})," with ",(0,i.jsx)(n.strong,{children:"same name"})," but different parameters."]}),(0,i.jsxs)(n.td,{children:["Child class provides a ",(0,i.jsx)(n.strong,{children:"specific implementation"})," of a method from the parent class, keeping the same method signature."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Inheritance"})}),(0,i.jsxs)(n.td,{children:["Not related to inheritance. Methods belong to the ",(0,i.jsx)(n.strong,{children:"same class"}),"."]}),(0,i.jsxs)(n.td,{children:["All about inheritance! The child class ",(0,i.jsx)(n.strong,{children:"inherits"})," and modifies the method."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Return Type"})}),(0,i.jsxs)(n.td,{children:["Can be ",(0,i.jsx)(n.strong,{children:"same or different"}),"."]}),(0,i.jsxs)(n.td,{children:["Must be ",(0,i.jsx)(n.strong,{children:"same"})," or a ",(0,i.jsx)(n.strong,{children:"subtype"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Method Signature"})}),(0,i.jsxs)(n.td,{children:["Same name, ",(0,i.jsx)(n.strong,{children:"different parameters"}),"."]}),(0,i.jsxs)(n.td,{children:["Same name, ",(0,i.jsx)(n.strong,{children:"same parameters"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Polymorphism"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Compile-time polymorphism"})," (decided at compile time)."]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Runtime polymorphism"})," (decided at runtime)."]})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Now, let\u2019s dive into each one separately. \ud83e\udd3f"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-method-overloading-the-shape-shifting-trick",children:"\ud83c\udfad Method Overloading: The Shape-Shifting Trick"}),"\n",(0,i.jsxs)(n.p,{children:["Method overloading allows you to define ",(0,i.jsx)(n.strong,{children:"multiple methods"})," with the ",(0,i.jsx)(n.strong,{children:"same name"})," but ",(0,i.jsx)(n.strong,{children:"different parameters"}),"\u2014like a magician changing costumes! \ud83e\ude84"]}),"\n",(0,i.jsx)(n.h3,{id:"-rules-of-method-overloading",children:"\ud83d\udd11 Rules of Method Overloading"}),"\n",(0,i.jsx)(n.h3,{id:"1\ufe0f\u20e3-method-arguments-must-be-different",children:"1\ufe0f\u20e3 Method Arguments Must Be Different"}),"\n",(0,i.jsxs)(n.p,{children:["Think of method overloading like a barista knowing how to make ",(0,i.jsx)(n.strong,{children:"espresso \u2615"}),", ",(0,i.jsx)(n.strong,{children:"latte \u2615\ud83e\udd5b"}),", and ",(0,i.jsx)(n.strong,{children:"cappuccino \u2615\ud83e\udee7"}),". The method name is the same (",(0,i.jsx)(n.code,{children:"makeCoffee"}),"), but the ingredients (parameters) change!"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class Calculator {\n  public Integer sum(Integer a, Integer b) {\n    return a + b;\n  }\n\n  public Integer sum(Float a, Integer b) {\n    return a.intValue() + b;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Valid overloading:"})," Different parameter types!"]}),"\n",(0,i.jsx)(n.h3,{id:"2\ufe0f\u20e3-return-types-dont-matter-only-parameters-do",children:"2\ufe0f\u20e3 Return Types Don't Matter (Only Parameters Do!)"}),"\n",(0,i.jsxs)(n.p,{children:["Changing only the return type? \ud83d\udea8 ",(0,i.jsx)(n.strong,{children:"Error ahead!"})," The compiler will think you\u2019re trying to make two identical methods."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class Calculator {\n  public Integer sum(Integer a, Integer b) {\n    return a + b;\n  }\n\n  public Double sum(Integer a, Integer b) {\n    return new Double(a + b); // \u274c Compiler error!\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\ude45\u200d\u2642\ufe0f ",(0,i.jsx)(n.strong,{children:"Invalid overloading:"})," Only the return type changed!"]}),"\n",(0,i.jsx)(n.h3,{id:"3\ufe0f\u20e3-exceptions-dont-count",children:"3\ufe0f\u20e3 Exceptions Don\u2019t Count"}),"\n",(0,i.jsx)(n.p,{children:"Throwing different exceptions? Java doesn\u2019t care when it comes to overloading. It only checks method signatures!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class Calculator {\n  public Integer sum(Integer a, Integer b) throws NullPointerException{\n    return a + b;\n  }\n  \n  public Integer sum(Integer a, Integer b) throws IllegalArgumentException{\n    return a + b;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udd0d ",(0,i.jsx)(n.strong,{children:"Still invalid"}),"\u2014same parameters, so it\u2019s NOT an overload."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-method-overriding-the-rebel-child-",children:"\ud83c\udfc6 Method Overriding: The Rebel Child \ud83d\ude08"}),"\n",(0,i.jsxs)(n.p,{children:["Method overriding is when the child class ",(0,i.jsx)(n.strong,{children:"modifies"})," a method inherited from the parent class. Think of it like a rebellious teenager rewriting the house rules! \ud83c\udfe0\u27a1\ufe0f\ud83c\udfe2"]}),"\n",(0,i.jsx)(n.h3,{id:"-rules-of-method-overriding",children:"\ud83d\udd11 Rules of Method Overriding"}),"\n",(0,i.jsxs)(n.h3,{id:"1\ufe0f\u20e3-method-arguments-must-be-exactly-the-same",children:["1\ufe0f\u20e3 Method Arguments Must Be ",(0,i.jsx)(n.strong,{children:"Exactly"})," the Same"]}),"\n",(0,i.jsxs)(n.p,{children:["The overridden method ",(0,i.jsx)(n.strong,{children:"must have the same"})," name, return type, and parameters."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Parent {\n  public Integer sum(Integer a, Integer b) {\n    return a + b;\n  }\n}\n\nclass Child extends Parent {\n  public Integer sum(Integer a, Integer b) {\n    return a + b;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Valid overriding:"})," Everything matches!"]}),"\n",(0,i.jsx)(n.h3,{id:"2\ufe0f\u20e3-return-type-can-be-a-subtype-but-not-different",children:"2\ufe0f\u20e3 Return Type Can Be a Subtype (But Not Different)"}),"\n",(0,i.jsxs)(n.p,{children:["Your child class ",(0,i.jsx)(n.strong,{children:"can"})," return a subtype (Integer instead of Number)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Parent {\n  public Number sum(Integer a, Integer b) {\n    return a + b;\n  }\n}\n\nclass Child extends Parent {\n  public Integer sum(Integer a, Integer b) {\n    return a + b;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Valid:"})," Integer is a subtype of Number!"]}),"\n",(0,i.jsxs)(n.p,{children:["But change it to ",(0,i.jsx)(n.strong,{children:"String"}),", and Java will throw a tantrum. \ud83d\ude21"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Parent {\n  public Number sum(Integer a, Integer b) {\n    return a + b;\n  }\n}\n\nclass Child extends Parent {\n  public String sum(Integer a, Integer b) {\n    return a.toString() + b.toString(); // \u274c Compiler error!\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\ude45\u200d\u2642\ufe0f ",(0,i.jsx)(n.strong,{children:"Invalid:"})," String is NOT a subtype of Number."]}),"\n",(0,i.jsx)(n.h3,{id:"3\ufe0f\u20e3-thrown-exception-can-be-a-subtype",children:"3\ufe0f\u20e3 Thrown Exception Can Be a Subtype"}),"\n",(0,i.jsxs)(n.p,{children:["Your child class ",(0,i.jsx)(n.strong,{children:"can"})," throw a smaller exception but ",(0,i.jsx)(n.strong,{children:"not a bigger one"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Parent {\n  public String readFile(String file) throws FileNotFoundException {\n    return null;\n  }\n}\n\nclass Child extends Parent {\n  public String readFile(String file) throws RuntimeException {\n    return null;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Valid:"})," ",(0,i.jsx)(n.code,{children:"RuntimeException"})," is an unchecked exception!"]}),"\n",(0,i.jsxs)(n.p,{children:["But throw ",(0,i.jsx)(n.strong,{children:"IOException"}),", and Java goes \ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"Nope!"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Child extends Parent {\n  public String readFile(String file) throws IOException {\n    return null;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udea8 ",(0,i.jsx)(n.strong,{children:"Compiler error:"})," IOException is higher than FileNotFoundException."]}),"\n",(0,i.jsx)(n.h3,{id:"4\ufe0f\u20e3-no-overriding-private-static-or-final-methods",children:"4\ufe0f\u20e3 No Overriding Private, Static, or Final Methods"}),"\n",(0,i.jsxs)(n.p,{children:["Private methods are like ",(0,i.jsx)(n.strong,{children:"family secrets"}),"\u2014they never get passed down. \ud83e\udd2b\nStatic methods belong to the ",(0,i.jsx)(n.strong,{children:"class itself"}),", not instances.\nFinal methods are ",(0,i.jsx)(n.strong,{children:"set in stone"})," and cannot be changed."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Parent {\n  private String readFile(String file) {\n    return null;\n  }\n}\n\nclass Child extends Parent {\n  public String readFile(String file) { // \u274c Not overriding!\n    return null;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 No error, but this ",(0,i.jsx)(n.strong,{children:"isn\u2019t"})," overriding\u2014because ",(0,i.jsx)(n.code,{children:"readFile()"})," in ",(0,i.jsx)(n.code,{children:"Parent"})," is ",(0,i.jsx)(n.strong,{children:"private"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"5\ufe0f\u20e3-overriding-method-cannot-reduce-access-scope",children:"5\ufe0f\u20e3 Overriding Method Cannot Reduce Access Scope"}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"Parent"})," method is ",(0,i.jsx)(n.code,{children:"protected"}),", ",(0,i.jsx)(n.code,{children:"Child"})," ",(0,i.jsx)(n.strong,{children:"must"})," keep it ",(0,i.jsx)(n.code,{children:"protected"})," or ",(0,i.jsx)(n.code,{children:"public"})," (but NOT private!)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Parent {\n  protected String readFile(String file){\n    return null;\n  }\n}\n\nclass Child extends Parent {\n  public String readFile(String file) {\n    return null;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Valid:"})," ",(0,i.jsx)(n.code,{children:"protected"})," \u2192 ",(0,i.jsx)(n.code,{children:"public"})," (allowed)."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-how-to-verify-method-overriding",children:"\u2705 How to Verify Method Overriding"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"@Override"})," to ensure correct overriding! If there\u2019s a mistake, the compiler ",(0,i.jsx)(n.strong,{children:"will"})," catch it. \ud83d\udd75\ufe0f\u200d\u2642\ufe0f"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Child extends Parent {\n  @Override\n  public String readFile(String file) {\n    return null;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-conclusion",children:"\ud83c\udfaf Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["Method ",(0,i.jsx)(n.strong,{children:"overloading"})," gives multiple ways to use a method in the same class, while ",(0,i.jsx)(n.strong,{children:"overriding"})," lets a child class customize a method from its parent. Both are powerful\u2014but use them wisely!"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\ude80 ",(0,i.jsx)(n.strong,{children:"Happy coding!"})," \ud83c\udf89"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3390:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>d});var t=r(6540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);