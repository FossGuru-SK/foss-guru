"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[8011],{3053:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"kits/java/Misc Topics/java-versions-features/java-8/date-time","title":"Java 8 Date Time API","description":"Java 8 contains the new Date and Time APIs/classes (JSR-310), called ThreeTen, which will change how you have been handling dates in Java.","source":"@site/community/kits/java/Misc Topics/java-versions-features/java-8/date-time.md","sourceDirName":"kits/java/Misc Topics/java-versions-features/java-8","slug":"/kits/java/Misc Topics/java-versions-features/java-8/date-time","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-8/date-time","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"date-time","title":"Java 8 Date Time API","description":"Java 8 contains the new Date and Time APIs/classes (JSR-310), called ThreeTen, which will change how you have been handling dates in Java.","sidebar_position":5},"sidebar":"community","previous":{"title":"Functional Interfaces in Java","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-8/functional-interface"},"next":{"title":"Java 9","permalink":"/foss-guru/community/category/java-9"}}');var i=t(4848),s=t(8453);const o={id:"date-time",title:"Java 8 Date Time API",description:"Java 8 contains the new Date and Time APIs/classes (JSR-310), called ThreeTen, which will change how you have been handling dates in Java.",sidebar_position:5},r=void 0,l={},d=[{value:"Java Date and Time: The Ultimate Upgrade \ud83c\udf89",id:"java-date-and-time-the-ultimate-upgrade-",level:2},{value:"\ud83d\ude80 Key Features",id:"-key-features",level:2},{value:"1\ufe0f\u20e3 Working with Dates and Times",id:"1\ufe0f\u20e3-working-with-dates-and-times",level:2},{value:"\ud83d\udcc5 1.1 LocalDate: Date Without Time",id:"-11-localdate-date-without-time",level:3},{value:"\u23f0 1.2 LocalTime: Time Without Date",id:"-12-localtime-time-without-date",level:3},{value:"\ud83d\udcc6 1.3 LocalDateTime: Both Date and Time",id:"-13-localdatetime-both-date-and-time",level:3},{value:"\ud83c\udf0d 1.4 ZonedDateTime: Timezone-Aware",id:"-14-zoneddatetime-timezone-aware",level:3},{value:"2\ufe0f\u20e3 Measuring Time Intervals",id:"2\ufe0f\u20e3-measuring-time-intervals",level:2},{value:"\u23f3 2.1 Instant: Timestamps in UTC",id:"-21-instant-timestamps-in-utc",level:3},{value:"\u23f2\ufe0f 2.2 Duration: Time Between Instants",id:"\ufe0f-22-duration-time-between-instants",level:3},{value:"\ud83d\udcc6 2.3 Period: Difference Between Dates",id:"-23-period-difference-between-dates",level:3},{value:"3\ufe0f\u20e3 Utility Classes &amp; Formatting",id:"3\ufe0f\u20e3-utility-classes--formatting",level:2},{value:"\ud83d\uddd3\ufe0f Adjusting Dates",id:"\ufe0f-adjusting-dates",level:3},{value:"\ud83c\udfa8 Formatting Dates",id:"-formatting-dates",level:3}];function c(e){const a={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"Banner java icon",src:t(3390).A+"",width:"370",height:"364"})}),"\n",(0,i.jsx)(a.h2,{id:"java-date-and-time-the-ultimate-upgrade-",children:"Java Date and Time: The Ultimate Upgrade \ud83c\udf89"}),"\n",(0,i.jsxs)(a.p,{children:["For years, Java developers struggled with ",(0,i.jsx)(a.code,{children:"Date"})," and ",(0,i.jsx)(a.code,{children:"Calendar"})," classes. They were cumbersome, confusing, and full of surprises (not the good kind). The ",(0,i.jsx)(a.code,{children:"Date"})," class lacked essential features, and ",(0,i.jsx)(a.code,{children:"Calendar"})," was as easy to use as a 90s VCR remote."]}),"\n",(0,i.jsxs)(a.p,{children:["Then came ",(0,i.jsx)(a.strong,{children:"Java 8"}),", our knight in shining armor! \ud83e\uddb8\u200d\u2642\ufe0f The new ",(0,i.jsxs)(a.strong,{children:["Date and Time API ",(0,i.jsx)(a.a,{href:"https://github.com/ThreeTen",children:"(JSR-310)"})]})," revolutionized date handling with clarity, immutability, and ease of use."]}),"\n",(0,i.jsx)(a.h2,{id:"-key-features",children:"\ud83d\ude80 Key Features"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Immutable & Thread-safe:"})," No more accidental modifications."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Human-Readable Methods:"})," ",(0,i.jsx)(a.code,{children:"plusDays(5)"}),", ",(0,i.jsx)(a.code,{children:"minusWeeks(2)"}),", ",(0,i.jsx)(a.code,{children:"isLeapYear()"}),", etc."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Built-in Time Zones & Adjusters:"})," Finally, no more timezone nightmares!"]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"1\ufe0f\u20e3-working-with-dates-and-times",children:"1\ufe0f\u20e3 Working with Dates and Times"}),"\n",(0,i.jsx)(a.h3,{id:"-11-localdate-date-without-time",children:"\ud83d\udcc5 1.1 LocalDate: Date Without Time"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"LocalDate today = LocalDate.now();\nSystem.out.println(today); // 2025-02-27\n"})}),"\n",(0,i.jsx)(a.h3,{id:"-12-localtime-time-without-date",children:"\u23f0 1.2 LocalTime: Time Without Date"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"LocalTime now = LocalTime.now();\nSystem.out.println(now); // 14:30:15.123\n"})}),"\n",(0,i.jsx)(a.h3,{id:"-13-localdatetime-both-date-and-time",children:"\ud83d\udcc6 1.3 LocalDateTime: Both Date and Time"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"LocalDateTime timestamp = LocalDateTime.now();\nSystem.out.println(timestamp); // 2025-02-27T14:30:15.123\n"})}),"\n",(0,i.jsx)(a.h3,{id:"-14-zoneddatetime-timezone-aware",children:"\ud83c\udf0d 1.4 ZonedDateTime: Timezone-Aware"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:'ZonedDateTime zonedNow = ZonedDateTime.now(ZoneId.of("Asia/Tokyo"));\nSystem.out.println(zonedNow); // 2025-02-27T14:30+09:00[Asia/Tokyo]\n'})}),"\n",(0,i.jsx)(a.h2,{id:"2\ufe0f\u20e3-measuring-time-intervals",children:"2\ufe0f\u20e3 Measuring Time Intervals"}),"\n",(0,i.jsx)(a.h3,{id:"-21-instant-timestamps-in-utc",children:"\u23f3 2.1 Instant: Timestamps in UTC"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"Instant instant = Instant.now();\nSystem.out.println(instant); // 2025-02-27T05:30:15.123Z\n"})}),"\n",(0,i.jsx)(a.h3,{id:"\ufe0f-22-duration-time-between-instants",children:"\u23f2\ufe0f 2.2 Duration: Time Between Instants"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"Duration gap = Duration.between(instant, instant.plusSeconds(600));\nSystem.out.println(gap.toMinutes()); // 10\n"})}),"\n",(0,i.jsx)(a.h3,{id:"-23-period-difference-between-dates",children:"\ud83d\udcc6 2.3 Period: Difference Between Dates"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"Period period = Period.between(LocalDate.of(2020, 2, 27), LocalDate.of(2025, 2, 27));\nSystem.out.println(period.getYears()); // 5\n"})}),"\n",(0,i.jsx)(a.h2,{id:"3\ufe0f\u20e3-utility-classes--formatting",children:"3\ufe0f\u20e3 Utility Classes & Formatting"}),"\n",(0,i.jsx)(a.h3,{id:"\ufe0f-adjusting-dates",children:"\ud83d\uddd3\ufe0f Adjusting Dates"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"LocalDate nextSunday = LocalDate.now().with(TemporalAdjusters.next(DayOfWeek.SUNDAY));\nSystem.out.println(nextSunday); // 2025-03-02\n"})}),"\n",(0,i.jsx)(a.h3,{id:"-formatting-dates",children:"\ud83c\udfa8 Formatting Dates"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:'DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd MMM yyyy, HH:mm");\nSystem.out.println(LocalDateTime.now().format(formatter)); // 27 Feb 2025, 14:30\n'})}),"\n",(0,i.jsx)(a.hr,{}),"\n",(0,i.jsxs)(a.p,{children:["The ",(0,i.jsx)(a.strong,{children:"Java 8 Date & Time API"})," is a massive improvement, making it easier and safer to work with dates. No more juggling ",(0,i.jsx)(a.code,{children:"Date"}),", ",(0,i.jsx)(a.code,{children:"Calendar"}),", and ",(0,i.jsx)(a.code,{children:"SimpleDateFormat"}),"."]}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:"Happy Coding! \ud83d\ude80"})})]})}function m(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3390:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,a,t)=>{t.d(a,{R:()=>o,x:()=>r});var n=t(6540);const i={},s=n.createContext(i);function o(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);