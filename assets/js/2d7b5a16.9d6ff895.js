"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[6593],{5258:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"kits/java/Misc Topics/java-versions-features/java-9/introduction","title":"Java 9 Features Intro","description":"Features in short","source":"@site/community/kits/java/Misc Topics/java-versions-features/java-9/introduction.md","sourceDirName":"kits/java/Misc Topics/java-versions-features/java-9","slug":"/kits/java/Misc Topics/java-versions-features/java-9/introduction","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-9/introduction","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"introduction","title":"Java 9 Features Intro","description":"Features in short","sidebar_position":1},"sidebar":"community","previous":{"title":"Java 9","permalink":"/foss-guru/community/category/java-9"},"next":{"title":"Java Platform Module System","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-9/java-platform-module-system"}}');var i=a(4848),t=a(8453);const l={id:"introduction",title:"Java 9 Features Intro",description:"Features in short",sidebar_position:1},o=void 0,r={},d=[{value:"Java 9 Features",id:"java-9-features",level:2},{value:"What is new in Java 9",id:"what-is-new-in-java-9",level:2},{value:"Java Platform Module System",id:"java-platform-module-system",level:2},{value:"In Java modular programming",id:"in-java-modular-programming",level:3},{value:"Example module-info.java",id:"example-module-infojava",level:4},{value:"Interface Private Methods",id:"interface-private-methods",level:2},{value:"Rules for private methods in interfaces",id:"rules-for-private-methods-in-interfaces",level:3},{value:"Example",id:"example",level:4},{value:"HTTP/2 Client",id:"http2-client",level:2},{value:"Example1",id:"example1",level:3},{value:"Example2",id:"example2",level:3},{value:"JShell \u2013 REPL Tool",id:"jshell--repl-tool",level:2},{value:"Features",id:"features",level:3},{value:"Platform and JVM Logging",id:"platform-and-jvm-logging",level:2},{value:"Key Points",id:"key-points",level:3},{value:"Process API Updates",id:"process-api-updates",level:2},{value:"Example3",id:"example3",level:3},{value:"Collection API Updates",id:"collection-api-updates",level:2},{value:"Example4",id:"example4",level:3},{value:"Stream API Improvements",id:"stream-api-improvements",level:2},{value:"Multi-Release JAR Files",id:"multi-release-jar-files",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Banner java icon",src:a(3390).A+"",width:"370",height:"364"})}),"\n",(0,i.jsx)(n.h2,{id:"java-9-features",children:"Java 9 Features"}),"\n",(0,i.jsx)(n.p,{children:"Java 9 is bringing lots of new enhancements which are going to affect your programming style and habit in a big way. The biggest change is the modularization of Java. It\u2019s another big change after Lambdas in Java 8. In this article, I am listing down changes which will be part of the JDK 9 release."}),"\n",(0,i.jsx)(n.h2,{id:"what-is-new-in-java-9",children:"What is new in Java 9"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/foss-guru/community/kits/java/Misc%20Topics/java-versions-features/java-9/java-platform-module-system",children:"Java platform module system"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/foss-guru/community/kits/java/Misc%20Topics/java-versions-features/java-9/private-interface-methods",children:"Interface Private Methods"})}),"\n",(0,i.jsx)(n.li,{children:"HTTP 2 Client"}),"\n",(0,i.jsx)(n.li,{children:"JShell - REPL Tool"}),"\n",(0,i.jsx)(n.li,{children:"Platform and JVM Logging"}),"\n",(0,i.jsx)(n.li,{children:"Process API Updates"}),"\n",(0,i.jsx)(n.li,{children:"Collection API Updates"}),"\n",(0,i.jsx)(n.li,{children:"Stream API Improvements"}),"\n",(0,i.jsx)(n.li,{children:"Multi-Release JAR Files"}),"\n",(0,i.jsx)(n.li,{children:"@Deprecated Tag Changes"}),"\n",(0,i.jsx)(n.li,{children:"Stack Walking"}),"\n",(0,i.jsx)(n.li,{children:"Java Docs Updates"}),"\n",(0,i.jsx)(n.li,{children:"Miscellaneous Other Features"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"java-platform-module-system",children:"Java Platform Module System"}),"\n",(0,i.jsx)(n.p,{children:"JPMS (Java Platform Module System) is the core highlight of the new Java 9 release. It is also known as Project Jigsaw. A module is a new construct similar to packages. An application developed using new modular programming can be seen as a collection of interacting modules with well-defined boundaries and dependencies between those modules."}),"\n",(0,i.jsxs)(n.p,{children:["The JPMS consists of providing support for writing modular applications as well as modularizing the JDK source code. JDK 9 is coming with around 92 modules (changes are possible in the GA release). Java 9 Module System has a ",(0,i.jsx)(n.code,{children:"java.base"})," Module, known as the Base Module. It is an independent module and does NOT depend on any other modules. By default, all other modules depend on ",(0,i.jsx)(n.code,{children:"java.base"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"in-java-modular-programming",children:"In Java modular programming"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A module is typically just a JAR file that has a ",(0,i.jsx)(n.code,{children:"module-info.class"})," file at the root."]}),"\n",(0,i.jsxs)(n.li,{children:["To use a module, include the JAR file into ",(0,i.jsx)(n.code,{children:"modulepath"})," instead of the ",(0,i.jsx)(n.code,{children:"classpath"}),". A modular JAR file added to the ",(0,i.jsx)(n.code,{children:"classpath"})," is treated as a normal JAR file, and ",(0,i.jsx)(n.code,{children:"module-info.class"})," will be ignored."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-module-infojava",children:"Example module-info.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"module helloworld {\n    exports com.howtodoinjava.demo;\n}\n \nmodule test {\n    requires helloworld;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interface-private-methods",children:"Interface Private Methods"}),"\n",(0,i.jsx)(n.p,{children:"Java 8 allowed default methods in interfaces, which was widely appreciated. However, interfaces still lacked private methods. From Java 9 onwards, private methods are allowed in interfaces."}),"\n",(0,i.jsx)(n.p,{children:"These private methods improve code reusability inside interfaces. For example, if two default methods need to share code, a private interface method allows them to do so without exposing it to implementing classes."}),"\n",(0,i.jsx)(n.h3,{id:"rules-for-private-methods-in-interfaces",children:"Rules for private methods in interfaces"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Private interface methods cannot be abstract."}),"\n",(0,i.jsx)(n.li,{children:"Private methods can be used only inside the interface."}),"\n",(0,i.jsx)(n.li,{children:"Private static methods can be used inside both static and non-static interface methods."}),"\n",(0,i.jsx)(n.li,{children:"Private non-static methods cannot be used inside private static methods."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public interface CustomCalculator {\n    default int addEvenNumbers(int... nums) {\n        return add(n -> n % 2 == 0, nums);\n    }\n \n    default int addOddNumbers(int... nums) {\n        return add(n -> n % 2 != 0, nums);\n    }\n \n    private int add(IntPredicate predicate, int... nums) {\n        return IntStream.of(nums)\n            .filter(predicate)\n            .sum();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"http2-client",children:"HTTP/2 Client"}),"\n",(0,i.jsxs)(n.p,{children:["The HTTP/1.1 client was released in 1997, and much has changed since then. Java 9 introduces a new API that is cleaner and clearer, with support for HTTP/2. The new API consists of three major classes: ",(0,i.jsx)(n.code,{children:"HttpClient"}),", ",(0,i.jsx)(n.code,{children:"HttpRequest"}),", and ",(0,i.jsx)(n.code,{children:"HttpResponse"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"example1",children:"Example1"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'HttpClient httpClient = HttpClient.newHttpClient();\nHttpRequest httpRequest = HttpRequest.newBuilder().uri(new URI("https://howtodoinjava.com/")).GET().build();\nHttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\nSystem.out.println(httpResponse.body());\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The new API also supports asynchronous HTTP requests using ",(0,i.jsx)(n.code,{children:"httpClient.sendAsync()"}),", returning a ",(0,i.jsx)(n.code,{children:"CompletableFuture"})," object. The request can even be canceled before completion."]}),"\n",(0,i.jsx)(n.h3,{id:"example2",children:"Example2"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"if (httpResponse.isDone()) {\n    System.out.println(httpResponse.get().statusCode());\n    System.out.println(httpResponse.get().body());\n} else {\n    httpResponse.cancel(true);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"jshell--repl-tool",children:"JShell \u2013 REPL Tool"}),"\n",(0,i.jsx)(n.p,{children:"JShell is a new command-line interactive tool shipped with JDK 9 [JEP 222] to evaluate Java code snippets interactively. It allows immediate execution of Java code without creating a full application."}),"\n",(0,i.jsx)(n.h3,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Launch inbuilt code editor in a separate window"}),"\n",(0,i.jsx)(n.li,{children:"Launch an external code editor"}),"\n",(0,i.jsx)(n.li,{children:"Execute code on save operation in external editors"}),"\n",(0,i.jsx)(n.li,{children:"Load pre-written classes from the filesystem"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"platform-and-jvm-logging",children:"Platform and JVM Logging"}),"\n",(0,i.jsx)(n.p,{children:"JDK 9 introduces improved logging in platform classes and JVM components through a new logging API. It allows using a logging framework of your choice (e.g., Log4J2) as the backend."}),"\n",(0,i.jsx)(n.h3,{id:"key-points",children:"Key Points"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This API is intended for use by JDK classes, not application classes."}),"\n",(0,i.jsx)(n.li,{children:"Application code should continue using existing logging APIs."}),"\n",(0,i.jsx)(n.li,{children:"The API does not allow configuring the logger programmatically."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["JDK 9 also adds a new command-line option, ",(0,i.jsx)(n.code,{children:"-Xlog"}),", which provides a single point of access for all JVM log messages."]}),"\n",(0,i.jsx)(n.h2,{id:"process-api-updates",children:"Process API Updates"}),"\n",(0,i.jsxs)(n.p,{children:["Java 9 improves process management with ",(0,i.jsx)(n.code,{children:"java.lang.ProcessHandle.Info"}),", which provides details about any process, such as:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The command used to start the process"}),"\n",(0,i.jsx)(n.li,{children:"Command-line arguments"}),"\n",(0,i.jsx)(n.li,{children:"Start time and total execution time"}),"\n",(0,i.jsx)(n.li,{children:"The user who created the process"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example3",children:"Example3"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'ProcessHandle processHandle = ProcessHandle.current();\nProcessHandle.Info processInfo = processHandle.info();\n \nSystem.out.println(processHandle.pid());\nSystem.out.println(processInfo.arguments().isPresent());\nSystem.out.println(processInfo.command().orElse("Unknown"));\nSystem.out.println(processInfo.startInstant().orElse(null));\n'})}),"\n",(0,i.jsx)(n.h2,{id:"collection-api-updates",children:"Collection API Updates"}),"\n",(0,i.jsx)(n.p,{children:"Java 9 introduces immutable collections using new factory methods."}),"\n",(0,i.jsx)(n.h3,{id:"example4",children:"Example4"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.util.*;\n \npublic class ImmutableCollections {\n    public static void main(String[] args) {\n        List<String> namesList = List.of("Lokesh", "Amit", "John");\n        Set<String> namesSet = Set.of("Lokesh", "Amit", "John");\n        Map<String, String> namesMap = Map.ofEntries(\n            Map.entry("1", "Lokesh"),\n            Map.entry("2", "Amit"),\n            Map.entry("3", "Brian")\n        );\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"stream-api-improvements",children:"Stream API Improvements"}),"\n",(0,i.jsx)(n.p,{children:"Java 9 introduces new methods in the Stream API:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"takeWhile"})," and ",(0,i.jsx)(n.code,{children:"dropWhile"})," for filtering elements based on predicates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Stream.ofNullable()"})," to create a stream from a nullable value"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"multi-release-jar-files",children:"Multi-Release JAR Files"}),"\n",(0,i.jsx)(n.p,{children:"Previously, all classes had to be packaged in a single JAR file. Java 9 introduces multi-release JAR files, allowing different versions of classes for different Java versions."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"This document covers the major enhancements introduced in Java 9. These changes significantly improve modularity, efficiency, and usability in Java development."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3390:(e,n,a)=>{a.d(n,{A:()=>s});const s=a.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>o});var s=a(6540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);