"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[430],{5991:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"kits/java/Java OOP/building-blocks-of-oops/multiple-inheritance","title":"Multiple Inheritance in Java","description":"Multiple inheritance is a feature of some object-oriented computer programming languages in which an object or class can inherit characteristics and behavior from more than one parent object or parent class.","source":"@site/community/kits/java/Java OOP/building-blocks-of-oops/multiple-inheritance.md","sourceDirName":"kits/java/Java OOP/building-blocks-of-oops","slug":"/kits/java/Java OOP/building-blocks-of-oops/multiple-inheritance","permalink":"/foss-guru/community/kits/java/Java OOP/building-blocks-of-oops/multiple-inheritance","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"multiple-inheritance","title":"Multiple Inheritance in Java","description":"Multiple inheritance is a feature of some object-oriented computer programming languages in which an object or class can inherit characteristics and behavior from more than one parent object or parent class.","sidebar_position":6},"sidebar":"community","previous":{"title":"Java Inheritance","permalink":"/foss-guru/community/kits/java/Java OOP/building-blocks-of-oops/inheritance"},"next":{"title":"Polymorphism in Java","permalink":"/foss-guru/community/kits/java/Java OOP/building-blocks-of-oops/polymorphism"}}');var t=a(4848),s=a(8453);const l={id:"multiple-inheritance",title:"Multiple Inheritance in Java",description:"Multiple inheritance is a feature of some object-oriented computer programming languages in which an object or class can inherit characteristics and behavior from more than one parent object or parent class.",sidebar_position:6},r=void 0,o={},c=[{value:"\ud83c\udfad Multiple Inheritance in Java \u2013 The Fun Side",id:"-multiple-inheritance-in-java--the-fun-side",level:2},{value:"1\ufe0f\u20e3 What is Multiple Inheritance?",id:"1\ufe0f\u20e3-what-is-multiple-inheritance",level:2},{value:"\u274c Why Can&#39;t Java Have Multiple Inheritance of Classes?",id:"-why-cant-java-have-multiple-inheritance-of-classes",level:3},{value:"2\ufe0f\u20e3 Meet Default Methods \u2013 Java\u2019s &quot;Oops, We Forgot This&quot; Feature",id:"2\ufe0f\u20e3-meet-default-methods--javas-oops-we-forgot-this-feature",level:2},{value:"3\ufe0f\u20e3 Multiple Inheritance with Default Methods? Yes, Please! \ud83c\udfc6",id:"3\ufe0f\u20e3-multiple-inheritance-with-default-methods-yes-please-",level:2},{value:"4\ufe0f\u20e3 Possible Conflicts \u2013 When Java Has an Identity Crisis \ud83e\udd26",id:"4\ufe0f\u20e3-possible-conflicts--when-java-has-an-identity-crisis-",level:2}];function h(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Banner java icon",src:a(3390).A+"",width:"370",height:"364"})}),"\n",(0,t.jsx)(n.h2,{id:"-multiple-inheritance-in-java--the-fun-side",children:"\ud83c\udfad Multiple Inheritance in Java \u2013 The Fun Side"}),"\n",(0,t.jsxs)(n.p,{children:["Before Java 8, Java was like that strict parent who said, ",(0,t.jsx)(n.em,{children:"\"No, you can't have multiple inheritance, it's too dangerous!\""})," \ud83d\ude24 But with Java 8, default methods swooped in like superheroes, saving us from the ",(0,t.jsx)(n.em,{children:"dreaded diamond problem"})," while allowing a taste of multiple inheritance. \ud83e\uddb8\u200d\u2642\ufe0f"]}),"\n",(0,t.jsx)(n.h2,{id:"1\ufe0f\u20e3-what-is-multiple-inheritance",children:"1\ufe0f\u20e3 What is Multiple Inheritance?"}),"\n",(0,t.jsxs)(n.p,{children:["Imagine you're a superhero with powers from ",(0,t.jsx)(n.em,{children:"both"})," Superman \ud83e\uddb8\u200d\u2642\ufe0f and Batman \ud83e\udd87! That\u2019s multiple inheritance \u2013 a child class inheriting behaviors from more than one parent class."]}),"\n",(0,t.jsxs)(n.p,{children:["However, Java classes still can't use ",(0,t.jsx)(n.code,{children:"extends"})," for multiple classes (",(0,t.jsx)(n.em,{children:"no favoritism here!"})," \ud83d\ude45). But Java does allow implementing multiple interfaces, which is kind of like multiple inheritance \u2013 with a twist! \ud83c\udfad"]}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,t.jsx)(n.strong,{children:"Key Insight"}),": Interfaces only define ",(0,t.jsx)(n.em,{children:"contracts"})," (rules), not concrete behavior... or at least, that was the case before Java 8."]}),"\n",(0,t.jsx)(n.h3,{id:"-why-cant-java-have-multiple-inheritance-of-classes",children:"\u274c Why Can't Java Have Multiple Inheritance of Classes?"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class D extends A, B { // \u274c Nope, Java won't allow this!\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If Java allowed this, we'd have a ",(0,t.jsx)(n.em,{children:"headache"})," whenever two parent classes had the same method. Imagine the chaos! \ud83d\udca5\ud83e\udd2f"]}),"\n",(0,t.jsx)(n.h2,{id:"2\ufe0f\u20e3-meet-default-methods--javas-oops-we-forgot-this-feature",children:'2\ufe0f\u20e3 Meet Default Methods \u2013 Java\u2019s "Oops, We Forgot This" Feature'}),"\n",(0,t.jsxs)(n.p,{children:["Ever tried adding a new method to an ",(0,t.jsx)(n.em,{children:"existing"})," interface? It\u2019s like trying to add pineapple to a pizza at an Italian restaurant. \ud83c\udf55\u274c You break things, people get mad!"]}),"\n",(0,t.jsxs)(n.p,{children:["To fix this, Java 8 introduced ",(0,t.jsx)(n.strong,{children:"default methods"}),". These are methods in interfaces that have a body and don't force implementing classes to override them. \ud83e\udd2f"]}),"\n",(0,t.jsx)(n.p,{children:"Let's see an example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public interface Moveable {\n    default void moveFast() {\n        System.out.println("I am moving fast");\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now, any class implementing ",(0,t.jsx)(n.code,{children:"Moveable"})," gets ",(0,t.jsx)(n.code,{children:"moveFast()"})," for free! \ud83c\udf89"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Animal implements Moveable { }\n\nAnimal tiger = new Animal();\ntiger.moveFast(); // Output: I am moving fast\n"})}),"\n",(0,t.jsx)(n.h2,{id:"3\ufe0f\u20e3-multiple-inheritance-with-default-methods-yes-please-",children:"3\ufe0f\u20e3 Multiple Inheritance with Default Methods? Yes, Please! \ud83c\udfc6"}),"\n",(0,t.jsxs)(n.p,{children:["Java 8 allows interfaces to contain behavior, so if a class implements multiple interfaces, it ",(0,t.jsx)(n.em,{children:"inherits"})," behaviors from multiple parents! \ud83d\ude80"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'interface Moveable {\n    default void moveFast() {\n        System.out.println("I am moving fast");\n    }\n}\n\ninterface Crawlable {\n    default void crawl() {\n        System.out.println("I am crawling");\n    }\n}\n\npublic class Animal implements Moveable, Crawlable { }\n\nAnimal self = new Animal();\nself.moveFast(); // I am moving fast\nself.crawl();    // I am crawling\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now, our ",(0,t.jsx)(n.code,{children:"Animal"})," class is both a sprinter \ud83c\udfc3 and a crawler \ud83d\udc1b. Talk about versatility!"]}),"\n",(0,t.jsx)(n.h2,{id:"4\ufe0f\u20e3-possible-conflicts--when-java-has-an-identity-crisis-",children:"4\ufe0f\u20e3 Possible Conflicts \u2013 When Java Has an Identity Crisis \ud83e\udd26"}),"\n",(0,t.jsxs)(n.p,{children:["What if two interfaces define ",(0,t.jsx)(n.strong,{children:"the same"})," method? Java won\u2019t magically guess which one you meant. You have to ",(0,t.jsx)(n.em,{children:"break the tie"})," manually. \ud83e\udd37\u200d\u2642\ufe0f"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'interface Moveable {\n    default void run() {\n        System.out.println("I am moving fast");\n    }\n}\n\ninterface Crawlable {\n    default void run() {\n        System.out.println("I am crawling");\n    }\n}\n\npublic class Animal implements Moveable, Crawlable { }\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now, when we call:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"Animal animal = new Animal();\nanimal.run(); // \ud83d\ude31 Which run() should Java call?!\n"})}),"\n",(0,t.jsx)(n.p,{children:"Java won\u2019t decide for us! Instead, we must clarify:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"Moveable.super.run();   // Call Moveable's run() method\nCrawlable.super.run();  // Call Crawlable's run() method\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,t.jsx)(n.strong,{children:"Moral of the Story:"})," If two parents give you different advice, you gotta ",(0,t.jsx)(n.em,{children:"pick one!"})," \ud83d\ude06"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["And that\u2019s all you need to know about Java\u2019s ",(0,t.jsx)(n.em,{children:"not-quite"})," multiple inheritance! \ud83c\udfad"]}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udd39 ",(0,t.jsx)(n.strong,{children:"Default methods"})," let interfaces define behavior without breaking existing implementations. \ud83d\ude80\n\ud83d\udd39 ",(0,t.jsx)(n.strong,{children:"Multiple interfaces"})," allow classes to inherit behavior from different parents. \ud83c\udf89\n\ud83d\udd39 ",(0,t.jsx)(n.strong,{children:"Conflicts?"})," Java says, ",(0,t.jsx)(n.em,{children:'"You figure it out!"'})," \ud83d\ude1c"]}),"\n",(0,t.jsx)(n.p,{children:"Happy Learning! \ud83c\udf93\ud83d\ude80"})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},3390:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>r});var i=a(6540);const t={},s=i.createContext(t);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);