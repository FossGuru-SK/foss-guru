"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[9031],{8189:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"kits/java/Java OOP/Differences need to know/interface-abstract-class","title":"Java Interface vs. Abstract Class","description":"Learn about java abstract classes vs interfaces in detail and when to use interfaces and abstract classes in solving design issues in Java 8.","source":"@site/community/kits/java/Java OOP/Differences need to know/interface-abstract-class.md","sourceDirName":"kits/java/Java OOP/Differences need to know","slug":"/kits/java/Java OOP/Differences need to know/interface-abstract-class","permalink":"/foss-guru/community/kits/java/Java OOP/Differences need to know/interface-abstract-class","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"interface-abstract-class","title":"Java Interface vs. Abstract Class","description":"Learn about java abstract classes vs interfaces in detail and when to use interfaces and abstract classes in solving design issues in Java 8.","sidebar_position":3},"sidebar":"community","previous":{"title":"Java Encapsulation vs. Abstraction","permalink":"/foss-guru/community/kits/java/Java OOP/Differences need to know/encapsulation-abstraction"},"next":{"title":"Java Strings","permalink":"/foss-guru/community/category/java-strings"}}');var a=n(4848),i=n(8453);const r={id:"interface-abstract-class",title:"Java Interface vs. Abstract Class",description:"Learn about java abstract classes vs interfaces in detail and when to use interfaces and abstract classes in solving design issues in Java 8.",sidebar_position:3},l=void 0,c={},o=[{value:"\ud83c\udfc6 The Ultimate Java Showdown: Abstract Class vs. Interface",id:"-the-ultimate-java-showdown-abstract-class-vs-interface",level:2},{value:"1\ufe0f\u20e3 Abstract Class - The &quot;Almost There&quot; Blueprint \ud83c\udfad",id:"1\ufe0f\u20e3-abstract-class---the-almost-there-blueprint-",level:2},{value:"Example Time! \ud83c\udfac",id:"example-time-",level:3},{value:"2\ufe0f\u20e3 Interface - The &quot;Contract&quot; You Can&#39;t Ignore \ud83d\udcdc",id:"2\ufe0f\u20e3-interface---the-contract-you-cant-ignore-",level:2},{value:"Example \ud83d\ude80",id:"example-",level:3},{value:"3\ufe0f\u20e3 Abstract Class Implementing an Interface \ud83e\udd2f",id:"3\ufe0f\u20e3-abstract-class-implementing-an-interface-",level:2},{value:"4\ufe0f\u20e3 Abstract Class vs. Interface: The Ultimate Face-Off! \u26a1",id:"4\ufe0f\u20e3-abstract-class-vs-interface-the-ultimate-face-off-",level:2},{value:"5\ufe0f\u20e3 When to Use What? \ud83e\udd37\u200d\u2642\ufe0f",id:"5\ufe0f\u20e3-when-to-use-what-\ufe0f",level:2},{value:"\ud83d\udee0 <strong>Use Abstract Classes When...</strong>",id:"-use-abstract-classes-when",level:3},{value:"Example",id:"example",level:4},{value:"\ud83d\udcdc <strong>Use Interfaces When...</strong>",id:"-use-interfaces-when",level:3},{value:"Example1",id:"example1",level:4},{value:"6\ufe0f\u20e3 Java 8: Default Methods - The Game Changer! \ud83c\udfae",id:"6\ufe0f\u20e3-java-8-default-methods---the-game-changer-",level:2},{value:"7\ufe0f\u20e3 Java 8&#39;s Impact on the Abstract Class vs. Interface Battle \u2694\ufe0f",id:"7\ufe0f\u20e3-java-8s-impact-on-the-abstract-class-vs-interface-battle-\ufe0f",level:2},{value:"\ud83c\udf89 Conclusion: Who Wins? \ud83e\udd14",id:"-conclusion-who-wins-",level:3}];function d(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{alt:"Banner java icon",src:n(4769).A+"",width:"370",height:"364"})}),"\n",(0,a.jsx)(s.h2,{id:"-the-ultimate-java-showdown-abstract-class-vs-interface",children:"\ud83c\udfc6 The Ultimate Java Showdown: Abstract Class vs. Interface"}),"\n",(0,a.jsx)(s.p,{children:"Abstract classes and interfaces are the MVPs of Java APIs! But how do they differ? Let's break it down in a fun way. Grab your popcorn, folks! \ud83c\udf7f"}),"\n",(0,a.jsx)(s.h2,{id:"1\ufe0f\u20e3-abstract-class---the-almost-there-blueprint-",children:'1\ufe0f\u20e3 Abstract Class - The "Almost There" Blueprint \ud83c\udfad'}),"\n",(0,a.jsxs)(s.p,{children:["An ",(0,a.jsx)(s.strong,{children:"abstract class"})," is like an incomplete superhero\u2014strong, but still missing a piece of the puzzle. It\u2019s defined using the ",(0,a.jsx)(s.code,{children:"abstract"})," keyword and ",(0,a.jsx)(s.strong,{children:"may or may not"})," contain abstract methods."]}),"\n",(0,a.jsx)(s.h3,{id:"example-time-",children:"Example Time! \ud83c\udfac"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"public abstract class TestAbstractClass {\n\n    public abstract void abstractMethod(); // Unfinished business \ud83e\uddd0\n    public void normalMethod()  { ... method body ... } // All good here! \u2705\n}\n"})}),"\n",(0,a.jsxs)(s.p,{children:["\u26a0\ufe0f ",(0,a.jsx)(s.strong,{children:"Important Rule"}),": If a class has an abstract method, the whole class must be declared as ",(0,a.jsx)(s.code,{children:"abstract"}),"! Otherwise, Java will give you a stern look. \ud83d\udc40"]}),"\n",(0,a.jsxs)(s.p,{children:["\ud83e\udd14 ",(0,a.jsx)(s.strong,{children:"So, why use something you can't even instantiate?"})]}),"\n",(0,a.jsxs)(s.p,{children:["Because it's meant to be ",(0,a.jsx)(s.strong,{children:"extended"}),"! Think of it like a foundation for your dream house. \ud83c\udfe1"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"class ChildClass extends TestAbstractClass {\n\n  @Override\n  public void abstractMethod() {\n    // Completing the unfinished business! \ud83c\udf89\n  }\n}\n"})}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsx)(s.h2,{id:"2\ufe0f\u20e3-interface---the-contract-you-cant-ignore-",children:'2\ufe0f\u20e3 Interface - The "Contract" You Can\'t Ignore \ud83d\udcdc'}),"\n",(0,a.jsxs)(s.p,{children:["An ",(0,a.jsx)(s.strong,{children:"interface"})," is like a rulebook \ud83d\udcd6\u2014every class that signs up must follow all the rules. All methods in an interface are inherently ",(0,a.jsx)(s.strong,{children:"public and abstract"})," (unless you're Java 8+\u2014more on that later! \ud83d\ude09)."]}),"\n",(0,a.jsx)(s.h3,{id:"example-",children:"Example \ud83d\ude80"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"public interface TestInterface {\n    void implementMe(); // A promise you HAVE to keep! \ud83e\udd1d\n}\n"})}),"\n",(0,a.jsxs)(s.p,{children:["And if a class wants to be part of this elite group? It ",(0,a.jsx)(s.strong,{children:"must"})," implement the methods!"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"public class TestMain implements TestInterface {\n    @Override\n    public void implementMe() {\n        // Following the contract! \u2705\n    }\n}\n"})}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsx)(s.h2,{id:"3\ufe0f\u20e3-abstract-class-implementing-an-interface-",children:"3\ufe0f\u20e3 Abstract Class Implementing an Interface \ud83e\udd2f"}),"\n",(0,a.jsxs)(s.p,{children:["The only time you ",(0,a.jsx)(s.strong,{children:"don't"})," need to override an interface method is if you declare the class ",(0,a.jsx)(s.code,{children:"abstract"}),". Then, it just sits there, waiting for someone else to complete the work. \ud83d\udee0\ufe0f"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"public abstract class AbstractClass implements TestInterface {\n    // No need to override implementMe() \ud83d\ude0c\n}\n"})}),"\n",(0,a.jsx)(s.p,{children:"But when a normal class extends it? No more free rides! \ud83c\udfa2"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"public class ChildClass extends AbstractClass {\n    @Override\n    public void implementMe() {\n        // Finally doing the work! \ud83d\udd25\n    }\n}\n"})}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsx)(s.h2,{id:"4\ufe0f\u20e3-abstract-class-vs-interface-the-ultimate-face-off-",children:"4\ufe0f\u20e3 Abstract Class vs. Interface: The Ultimate Face-Off! \u26a1"}),"\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Feature"}),(0,a.jsx)(s.th,{children:"Abstract Class \ud83c\udfdb\ufe0f"}),(0,a.jsx)(s.th,{children:"Interface \ud83d\udcdc"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"Methods"}),(0,a.jsxs)(s.td,{children:["Can have ",(0,a.jsx)(s.strong,{children:"both"})," abstract & non-abstract methods"]}),(0,a.jsxs)(s.td,{children:[(0,a.jsx)(s.strong,{children:"Only abstract methods"})," (until Java 8)"]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"Access Modifiers"}),(0,a.jsxs)(s.td,{children:["Can be ",(0,a.jsx)(s.code,{children:"public"}),", ",(0,a.jsx)(s.code,{children:"protected"}),", ",(0,a.jsx)(s.code,{children:"private"})]}),(0,a.jsx)(s.td,{children:(0,a.jsxs)(s.strong,{children:["Only ",(0,a.jsx)(s.code,{children:"public"})]})})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"Static Methods"}),(0,a.jsx)(s.td,{children:"Allowed \u2705"}),(0,a.jsxs)(s.td,{children:[(0,a.jsx)(s.strong,{children:"Not allowed"})," (except default methods in Java 8)"]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"Multiple Inheritance"}),(0,a.jsxs)(s.td,{children:["\u274c Only ",(0,a.jsx)(s.strong,{children:"one"})," superclass"]}),(0,a.jsxs)(s.td,{children:["\u2705 Can implement ",(0,a.jsx)(s.strong,{children:"multiple"})," interfaces"]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"Instantiation"}),(0,a.jsx)(s.td,{children:"\u274c Nope, can't do it"}),(0,a.jsx)(s.td,{children:"\u274c Nope, still can't"})]})]})]}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsx)(s.h2,{id:"5\ufe0f\u20e3-when-to-use-what-\ufe0f",children:"5\ufe0f\u20e3 When to Use What? \ud83e\udd37\u200d\u2642\ufe0f"}),"\n",(0,a.jsxs)(s.h3,{id:"-use-abstract-classes-when",children:["\ud83d\udee0 ",(0,a.jsx)(s.strong,{children:"Use Abstract Classes When..."})]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["You need to ",(0,a.jsx)(s.strong,{children:"add partial behavior"})]}),"\n",(0,a.jsxs)(s.li,{children:["You want to reuse code (like ",(0,a.jsx)(s.code,{children:"HttpServlet"})," in Java EE \ud83c\udf10)"]}),"\n",(0,a.jsxs)(s.li,{children:["You need ",(0,a.jsx)(s.strong,{children:"shared state"})," (like instance variables)"]}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"example",children:"Example"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:'public abstract class HttpServlet {\n    public void init() {\n        System.out.println("Initialization done!");\n    }\n    public abstract void service(); // Must be implemented!\n}\n'})}),"\n",(0,a.jsxs)(s.h3,{id:"-use-interfaces-when",children:["\ud83d\udcdc ",(0,a.jsx)(s.strong,{children:"Use Interfaces When..."})]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["You need ",(0,a.jsx)(s.strong,{children:"pure abstraction"})," (just contracts, no implementation)"]}),"\n",(0,a.jsxs)(s.li,{children:["You want ",(0,a.jsx)(s.strong,{children:"multiple inheritance-like behavior"})]}),"\n",(0,a.jsxs)(s.li,{children:["You need to define ",(0,a.jsx)(s.strong,{children:"different behaviors in different places"})]}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"example1",children:"Example1"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"public interface Map<K, V> {\n    void put(K key, V value);\n    V get(K key);\n}\n"})}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsx)(s.h2,{id:"6\ufe0f\u20e3-java-8-default-methods---the-game-changer-",children:"6\ufe0f\u20e3 Java 8: Default Methods - The Game Changer! \ud83c\udfae"}),"\n",(0,a.jsxs)(s.p,{children:["Since Java 8, interfaces can have ",(0,a.jsx)(s.strong,{children:"default methods"}),"! This means they can provide ",(0,a.jsx)(s.strong,{children:"some"})," implementation, making them ",(0,a.jsx)(s.em,{children:"almost"})," like abstract classes. \ud83d\ude32"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:'public interface Moveable {\n    default void move(){\n        System.out.println("I am moving");\n    }\n}\n'})}),"\n",(0,a.jsxs)(s.p,{children:["And now, any class implementing ",(0,a.jsx)(s.code,{children:"Moveable"})," can just use the default method OR override it!"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"public class Animal implements Moveable {\n    public static void main(String[] args){\n        Animal tiger = new Animal();\n        tiger.move();   // Output: I am moving \ud83c\udfc3\u200d\u2642\ufe0f\n    }\n}\n"})}),"\n",(0,a.jsx)(s.p,{children:"Or, if you prefer your own twist:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:'public class Animal implements Moveable {\n    public void move(){\n        System.out.println("I am running");\n    }\n    public static void main(String[] args){\n        Animal tiger = new Animal();\n        tiger.move();   // Output: I am running \ud83c\udfc3\u200d\u2642\ufe0f\ud83d\udca8\n    }\n}\n'})}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsx)(s.h2,{id:"7\ufe0f\u20e3-java-8s-impact-on-the-abstract-class-vs-interface-battle-\ufe0f",children:"7\ufe0f\u20e3 Java 8's Impact on the Abstract Class vs. Interface Battle \u2694\ufe0f"}),"\n",(0,a.jsxs)(s.p,{children:["With ",(0,a.jsx)(s.strong,{children:"default methods"}),", interfaces have gotten a serious upgrade. The only ",(0,a.jsx)(s.strong,{children:"major"})," difference left is that Java ",(0,a.jsx)(s.strong,{children:"still"})," doesn\u2019t allow ",(0,a.jsx)(s.a,{href:"/foss-guru/community/kits/java/Java%20OOP/building-blocks-of-oops/multiple-inheritance",children:"multiple inheritance"})," of classes, but ",(0,a.jsx)(s.strong,{children:"does"})," allow multiple interface implementations."]}),"\n",(0,a.jsxs)(s.p,{children:["\ud83c\udfaf ",(0,a.jsx)(s.strong,{children:"Key Takeaway"}),": Interfaces now do almost everything an abstract class can! So, always think about your design before choosing one over the other."]}),"\n",(0,a.jsx)(s.hr,{}),"\n",(0,a.jsx)(s.h3,{id:"-conclusion-who-wins-",children:"\ud83c\udf89 Conclusion: Who Wins? \ud83e\udd14"}),"\n",(0,a.jsxs)(s.p,{children:["Both ",(0,a.jsx)(s.strong,{children:"abstract classes"})," and ",(0,a.jsx)(s.strong,{children:"interfaces"})," have their place in Java. It all depends on ",(0,a.jsx)(s.strong,{children:"what you need"}),":\n\u2705 Need to define behavior? ",(0,a.jsx)(s.strong,{children:"Use an abstract class!"}),"\n\u2705 Need a strict contract with multiple implementations? ",(0,a.jsx)(s.strong,{children:"Use an interface!"})]}),"\n",(0,a.jsxs)(s.p,{children:["\ud83d\udca1 Choose wisely, and ",(0,a.jsx)(s.strong,{children:"happy coding!"})," \ud83d\ude80\ud83d\udd25"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},4769:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>l});var t=n(6540);const a={},i=t.createContext(a);function r(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);