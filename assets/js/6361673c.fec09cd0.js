"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[5994],{1167:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"kits/java/Misc Topics/java-versions-features/java-8/functional-interface","title":"Functional Interfaces in Java","description":"Introduced in Java 8 -  a functional interface is simply an interface that has exactly one abstract method. Learn more about functional interfaces in this tutorial.","source":"@site/community/kits/java/Misc Topics/java-versions-features/java-8/functional-interface.md","sourceDirName":"kits/java/Misc Topics/java-versions-features/java-8","slug":"/kits/java/Misc Topics/java-versions-features/java-8/functional-interface","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-8/functional-interface","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"functional-interface","title":"Functional Interfaces in Java","description":"Introduced in Java 8 -  a functional interface is simply an interface that has exactly one abstract method. Learn more about functional interfaces in this tutorial.","sidebar_position":4},"sidebar":"community","previous":{"title":"Java Stream API","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-8/stream-api"},"next":{"title":"Java 8 Date Time API","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-8/date-time"}}');var t=a(4848),s=a(8453);const r={id:"functional-interface",title:"Functional Interfaces in Java",description:"Introduced in Java 8 -  a functional interface is simply an interface that has exactly one abstract method. Learn more about functional interfaces in this tutorial.",sidebar_position:4},o=void 0,c={},l=[{value:"\ud83c\udfad The Hilarious Guide to Functional Interfaces in Java 8 \ud83c\udfad",id:"-the-hilarious-guide-to-functional-interfaces-in-java-8-",level:2},{value:"\ud83c\udfa4 1. What\u2019s the Deal with Functional Interfaces?",id:"-1-whats-the-deal-with-functional-interfaces",level:2},{value:"\ud83c\udfaf 1.1. The One and Only: A Single Abstract Method",id:"-11-the-one-and-only-a-single-abstract-method",level:3},{value:"\ud83c\udfad 1.2. The Magic of Lambda Expressions \ud83c\udfa9\u2728",id:"-12-the-magic-of-lambda-expressions-",level:3},{value:"\ud83d\ude80 2. @FunctionalInterface Annotation",id:"-2-functionalinterface-annotation",level:2},{value:"\ud83e\udd16 3. Functional Interfaces in the JDK",id:"-3-functional-interfaces-in-the-jdk",level:2},{value:"\ud83d\udee0 4. Demo Time! Let\u2019s Square Up! \ud83d\udcd0",id:"-4-demo-time-lets-square-up-",level:2},{value:"\ud83c\udf89 5. Conclusion",id:"-5-conclusion",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Banner java icon",src:a(4769).A+"",width:"370",height:"364"})}),"\n",(0,t.jsx)(n.h2,{id:"-the-hilarious-guide-to-functional-interfaces-in-java-8-",children:"\ud83c\udfad The Hilarious Guide to Functional Interfaces in Java 8 \ud83c\udfad"}),"\n",(0,t.jsx)(n.h2,{id:"-1-whats-the-deal-with-functional-interfaces",children:"\ud83c\udfa4 1. What\u2019s the Deal with Functional Interfaces?"}),"\n",(0,t.jsx)(n.p,{children:"Functional interfaces are the cool kids of Java 8! Think of them as the VIPs of lambda expressions\u2014they have exactly ONE abstract method, and they\u2019re proud of it! Let\u2019s dive in. \ud83d\ude80"}),"\n",(0,t.jsx)(n.h3,{id:"-11-the-one-and-only-a-single-abstract-method",children:"\ud83c\udfaf 1.1. The One and Only: A Single Abstract Method"}),"\n",(0,t.jsxs)(n.p,{children:["A functional interface is like a stand-up comedian\u2014it has only one main act! This single abstract method is what makes it functional (and cool). These are also called ",(0,t.jsx)(n.strong,{children:"Single Abstract Method (SAM) Interfaces"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["But hey, Java allows some ",(0,t.jsx)(n.em,{children:"extras"})," without ruining the party:"]}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.a,{href:"/foss-guru/community/kits/java/Java%20OOP/building-blocks-of-oops/multiple-inheritance",children:"Default methods"})]}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.a,{href:"/foss-guru/community/kits/java/Java%20OOP/OOPs%20Inside%20Java/static",children:"Static methods"})]}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 Public methods inherited from ",(0,t.jsx)(n.code,{children:"Object"})," (because Java loves inheritance \ud83e\udd37\u200d\u2642\ufe0f)"]}),"\n",(0,t.jsx)(n.h3,{id:"-12-the-magic-of-lambda-expressions-",children:"\ud83c\udfad 1.2. The Magic of Lambda Expressions \ud83c\udfa9\u2728"}),"\n",(0,t.jsxs)(n.p,{children:["Lambda expressions make functional interfaces come alive! Let\u2019s look at a classic example with ",(0,t.jsx)(n.code,{children:"Comparator"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@FunctionalInterface\npublic interface Comparator<T> {\n    int compare(T o1, T o2);\n    boolean equals(Object obj); // Inherited from Object, so doesn\u2019t count!\n    // Default methods can chill here too...\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now, let's put this into action using lambdas! \ud83d\ude80"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Compare employees by ID\nComparator<Employee> compareById = Comparator.comparing(e -> e.getId());\n\n// Compare employees by first name\nComparator<Employee> compareByFirstName = Comparator.comparing(e -> e.getFirstName());\n"})}),"\n",(0,t.jsx)(n.p,{children:"Boom! Functional interfaces + lambdas = \u2764\ufe0f"}),"\n",(0,t.jsx)(n.h2,{id:"-2-functionalinterface-annotation",children:"\ud83d\ude80 2. @FunctionalInterface Annotation"}),"\n",(0,t.jsxs)(n.p,{children:["Java 8 introduced ",(0,t.jsx)(n.code,{children:"@FunctionalInterface"}),", which is like putting a \u201cVIP\u201d badge on your interface! \ud83c\udf9f\ufe0f It tells the compiler, \u201cHey, this is a functional interface\u2014don\u2019t mess with it!\u201d"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@FunctionalInterface\npublic interface MyFirstFunctionalInterface {\n    void firstWork();\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now, what if you try to sneak in another abstract method? \ud83e\udd14"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@FunctionalInterface\npublic interface MyFirstFunctionalInterface {\n    void firstWork();\n    void doSomeMoreWork();  // \u274c Compiler says NOPE!\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udd25 ",(0,t.jsx)(n.strong,{children:"Error:"})," \u201cToo many methods, buddy! You had ONE job!\u201d \ud83d\udd25"]}),"\n",(0,t.jsxs)(n.p,{children:["So, use ",(0,t.jsx)(n.code,{children:"@FunctionalInterface"})," wisely\u2014it helps prevent accidental bloopers!"]}),"\n",(0,t.jsx)(n.h2,{id:"-3-functional-interfaces-in-the-jdk",children:"\ud83e\udd16 3. Functional Interfaces in the JDK"}),"\n",(0,t.jsx)(n.p,{children:"Java didn\u2019t stop at just creating functional interfaces\u2014it threw in a whole bunch of them for us! Here are some of the most popular ones:"}),"\n",(0,t.jsxs)(n.p,{children:["\ud83c\udfad ",(0,t.jsx)(n.strong,{children:"Runnable"})," \u2013 Has only ",(0,t.jsx)(n.code,{children:"run()"}),". Just do it!"]}),"\n",(0,t.jsxs)(n.p,{children:["\u2696 ",(0,t.jsx)(n.strong,{children:"Comparable"})," \u2013 Uses ",(0,t.jsx)(n.code,{children:"compareTo()"}),". Because ordering matters!"]}),"\n",(0,t.jsxs)(n.p,{children:["\ud83c\udfac ",(0,t.jsx)(n.strong,{children:"ActionListener"})," \u2013 Has ",(0,t.jsx)(n.code,{children:"actionPerformed()"}),". Click-click, boom!"]}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udcde ",(0,t.jsx)(n.strong,{children:"Callable"})," \u2013 Calls something and returns a result."]}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udd0d ",(0,t.jsx)(n.strong,{children:"Predicate"})," \u2013 Takes a value and returns ",(0,t.jsx)(n.code,{children:"true"})," or ",(0,t.jsx)(n.code,{children:"false"}),". (A real judge!)"]}),"\n",(0,t.jsxs)(n.p,{children:["\ud83e\udd1d ",(0,t.jsx)(n.strong,{children:"BiPredicate"})," \u2013 Like ",(0,t.jsx)(n.code,{children:"Predicate"}),", but with two inputs."]}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udc40 ",(0,t.jsx)(n.strong,{children:"Consumer"})," \u2013 Takes an input, does something with it, and returns nothing. (Classic overachiever!)"]}),"\n",(0,t.jsxs)(n.p,{children:["\ud83c\udf7d ",(0,t.jsx)(n.strong,{children:"BiConsumer"})," \u2013 Same as ",(0,t.jsx)(n.code,{children:"Consumer"})," but with two inputs. (Sharing is caring!)"]}),"\n",(0,t.jsxs)(n.p,{children:["\ud83c\udf81 ",(0,t.jsx)(n.strong,{children:"Supplier"})," \u2013 Supplies a value when needed. (A gift that keeps on giving!)"]}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udd04 ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"Function<T, R>"})})," \u2013 Takes an input ",(0,t.jsx)(n.code,{children:"T"})," and returns ",(0,t.jsx)(n.code,{children:"R"}),". (The transformation master!)"]}),"\n",(0,t.jsxs)(n.p,{children:["\u26a1 ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"BiFunction<T, U, R>"})})," \u2013 Takes two inputs ",(0,t.jsx)(n.code,{children:"T"})," and ",(0,t.jsx)(n.code,{children:"U"})," and returns ",(0,t.jsx)(n.code,{children:"R"}),". (Like a chemistry experiment!)"]}),"\n",(0,t.jsx)(n.h2,{id:"-4-demo-time-lets-square-up-",children:"\ud83d\udee0 4. Demo Time! Let\u2019s Square Up! \ud83d\udcd0"}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s a functional interface in action, calculating squares like a math genius:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"Function<Integer, Integer> square = x -> x * x;\nSystem.out.println(square.apply(5));  // Prints 25 \ud83c\udf89\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-5-conclusion",children:"\ud83c\udf89 5. Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"So, what did we learn today?"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 Functional interfaces have exactly ",(0,t.jsx)(n.strong,{children:"one"})," abstract method (and that\u2019s non-negotiable!)."]}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 Lambda expressions are their ",(0,t.jsx)(n.strong,{children:"best friends"}),". \u2764\ufe0f"]}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.code,{children:"@FunctionalInterface"})," helps us ",(0,t.jsx)(n.strong,{children:"avoid accidental mistakes"}),". \ud83d\uded1"]}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 Java provides ",(0,t.jsx)(n.strong,{children:"many ready-to-use functional interfaces"})," for all our coding needs. \ud83c\udf81"]}),"\n",(0,t.jsx)(n.p,{children:"So, go forth and function-ify your Java code! Happy coding! \ud83d\ude80\ud83d\udd25"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},4769:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var i=a(6540);const t={},s=i.createContext(t);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);