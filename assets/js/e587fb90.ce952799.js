"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[8389],{1794:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"kits/spring-ai/Vector Store/pg-vector","title":"PgVector Store","description":"Learn to configure Postgres PgVectorStore to store the vectors generated with OpenAI and Ollama embedding models in a Spring AI project.","source":"@site/community/kits/spring-ai/Vector Store/pg-vector.md","sourceDirName":"kits/spring-ai/Vector Store","slug":"/kits/spring-ai/Vector Store/pg-vector","permalink":"/foss-guru/community/kits/spring-ai/Vector Store/pg-vector","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"pg-vector","title":"PgVector Store","description":"Learn to configure Postgres PgVectorStore to store the vectors generated with OpenAI and Ollama embedding models in a Spring AI project.","sidebar_position":1},"sidebar":"community","previous":{"title":"Vector Store","permalink":"/foss-guru/community/category/vector-store"},"next":{"title":"ChromaDB","permalink":"/foss-guru/community/kits/spring-ai/Vector Store/chroma-db"}}');var o=r(4848),t=r(8453);const s={id:"pg-vector",title:"PgVector Store",description:"Learn to configure Postgres PgVectorStore to store the vectors generated with OpenAI and Ollama embedding models in a Spring AI project.",sidebar_position:1},a=void 0,d={},c=[{value:"\ud83d\ude80 Fun with PgVectorStore, OpenAI, and Ollama in Spring AI",id:"-fun-with-pgvectorstore-openai-and-ollama-in-spring-ai",level:2},{value:"\ud83c\udfd7\ufe0f Step 1: Installing the Postgres PgVector Database",id:"\ufe0f-step-1-installing-the-postgres-pgvector-database",level:2},{value:"\ud83d\udc33 1.1. Using Docker",id:"-11-using-docker",level:3},{value:"\u2699\ufe0f Step 2: Configuring PgVector with Spring AI",id:"\ufe0f-step-2-configuring-pgvector-with-spring-ai",level:2},{value:"\ud83e\udd16 Step 3: Configuring PgVectorStore with OpenAI Embedding Models",id:"-step-3-configuring-pgvectorstore-with-openai-embedding-models",level:2},{value:"3.1. Add Dependencies",id:"31-add-dependencies",level:3},{value:"3.2. Properties Configuration",id:"32-properties-configuration",level:3},{value:"3.3. Demo App - Let&#39;s Test It",id:"33-demo-app---lets-test-it",level:3},{value:"\ud83e\udd2f Step 4: Configuring PgVectorStore with Ollama Embedding Models",id:"-step-4-configuring-pgvectorstore-with-ollama-embedding-models",level:2},{value:"4.1. Run Ollama with Docker",id:"41-run-ollama-with-docker",level:3},{value:"4.2. Add Dependencies",id:"42-add-dependencies",level:3},{value:"4.3. Properties Configuration",id:"43-properties-configuration",level:3},{value:"4.4. Demo App - Ollama in Action",id:"44-demo-app---ollama-in-action",level:3},{value:"\ud83d\udea8 Step 5: &quot;Oops, Too Many Dimensions!&quot;",id:"-step-5-oops-too-many-dimensions",level:2},{value:"Fix Options",id:"fix-options",level:3},{value:"\ud83c\udfaf Summary - What We Achieved Today",id:"-summary---what-we-achieved-today",level:2}];function l(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Banner Spring AI Icon",src:r(9666).A+"",width:"1022",height:"239"})}),"\n",(0,o.jsx)(n.h2,{id:"-fun-with-pgvectorstore-openai-and-ollama-in-spring-ai",children:"\ud83d\ude80 Fun with PgVectorStore, OpenAI, and Ollama in Spring AI"}),"\n",(0,o.jsxs)(n.p,{children:["So, you\u2019ve decided to dive into the magical world of ",(0,o.jsx)(n.strong,{children:"Spring AI"}),", ",(0,o.jsx)(n.strong,{children:"Postgres"}),", and ",(0,o.jsx)(n.strong,{children:"PgVectorStore"}),"? Buckle up! We\u2019re about to turn your database into a vector-storing, AI-boosted, RAG-ready beast! \ud83e\uddbe\ud83d\udd25"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-step-1-installing-the-postgres-pgvector-database",children:"\ud83c\udfd7\ufe0f Step 1: Installing the Postgres PgVector Database"}),"\n",(0,o.jsx)(n.p,{children:"PgVector is like that cool kid in the database world who can store vectors and find similar ones in a snap! Let\u2019s get it up and running."}),"\n",(0,o.jsx)(n.h3,{id:"-11-using-docker",children:"\ud83d\udc33 1.1. Using Docker"}),"\n",(0,o.jsx)(n.p,{children:"Why complicate things when Docker makes life easy? Run this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"docker run -it --rm --name postgres -p 5432:5432 \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_PASSWORD=postgres \\\n  -e VECTOR_STORE_TYPE=pgVector \\\n  pgvector/pgvector:pg16\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Or, if you\u2019re fancy and use ",(0,o.jsx)(n.strong,{children:"Docker Compose"}),", here\u2019s your setup:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'services:\n  postgres:\n    image: pgvector/pgvector:pg16\n    container_name: postgres\n    ports:\n      - "5432:5432"\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      VECTOR_STORE_TYPE: pgVector\n'})}),"\n",(0,o.jsxs)(n.p,{children:["\ud83d\udea8 ",(0,o.jsx)(n.strong,{children:"Heads up!"})," If you already have Postgres running, don\u2019t forget to enable the extensions ",(0,o.jsx)(n.code,{children:"vector"}),", ",(0,o.jsx)(n.code,{children:"hstore"}),", and ",(0,o.jsx)(n.code,{children:"uuid-ossp"}),"."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-step-2-configuring-pgvector-with-spring-ai",children:"\u2699\ufe0f Step 2: Configuring PgVector with Spring AI"}),"\n",(0,o.jsx)(n.p,{children:"Spring AI does the heavy lifting for us! Just set:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-properties",children:"spring.ai.vectorstore.pgvector.initialize-schema=true\n"})}),"\n",(0,o.jsx)(n.p,{children:"And it will magically run this schema setup:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:'CREATE EXTENSION IF NOT EXISTS vector;\nCREATE EXTENSION IF NOT EXISTS hstore;\nCREATE EXTENSION IF NOT EXISTS "uuid-ossp";\n\nCREATE TABLE IF NOT EXISTS vector_store (\n  id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,\n  content text,\n  metadata json,\n  embedding vector(1536)\n);\n\nCREATE INDEX ON vector_store USING HNSW (embedding vector_cosine_ops);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,o.jsx)(n.strong,{children:"Pro Tip:"})," You can customize the index type, distance type, and dimensions via ",(0,o.jsx)(n.code,{children:"application.properties"}),"!"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-step-3-configuring-pgvectorstore-with-openai-embedding-models",children:"\ud83e\udd16 Step 3: Configuring PgVectorStore with OpenAI Embedding Models"}),"\n",(0,o.jsx)(n.p,{children:"Want to make your app super smart with OpenAI? Let's do this! \ud83e\udde0"}),"\n",(0,o.jsx)(n.h3,{id:"31-add-dependencies",children:"3.1. Add Dependencies"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<dependency>\n  <groupId>org.springframework.ai</groupId>\n  <artifactId>spring-ai-openai-spring-boot-starter</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.ai</groupId>\n  <artifactId>spring-ai-pgvector-store-spring-boot-starter</artifactId>\n</dependency>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"32-properties-configuration",children:"3.2. Properties Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-properties",children:"spring.ai.openai.api-key=${OPENAI_API_KEY}\nspring.ai.openai.chat.model=gpt-4\nspring.ai.openai.embedding.model=text-embedding-ada-002\n"})}),"\n",(0,o.jsx)(n.h3,{id:"33-demo-app---lets-test-it",children:"3.3. Demo App - Let's Test It"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@SpringBootApplication\npublic class App implements CommandLineRunner {\n\n  public static void main(String[] args) {\n    SpringApplication.run(App.class);\n  }\n\n  private final VectorStore vectorStore;\n\n  public App(VectorStore vectorStore) {\n    this.vectorStore = vectorStore;\n  }\n\n  @Override\n  public void run(String... args) {\n    List<Document> documents = List.of(\n      new Document("Java is a high-level programming language."),\n      new Document("It is used for enterprise apps and Android development."),\n      new Document("Java has strong typing and automatic memory management.")\n    );\n    \n    vectorStore.add(documents);\n    \n    List<Document> results = vectorStore\n      .similaritySearch(SearchRequest.query("programming language").withTopK(1));\n    \n    results.forEach(doc -> System.out.println(doc.getContent()));\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["\ud83c\udf89 ",(0,o.jsx)(n.strong,{children:"Output:"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Java is a high-level programming language.\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-step-4-configuring-pgvectorstore-with-ollama-embedding-models",children:"\ud83e\udd2f Step 4: Configuring PgVectorStore with Ollama Embedding Models"}),"\n",(0,o.jsxs)(n.p,{children:["Wanna run LLMs locally? Meet ",(0,o.jsx)(n.strong,{children:"Ollama"}),"! \ud83c\udfe1\ud83e\udd99"]}),"\n",(0,o.jsx)(n.h3,{id:"41-run-ollama-with-docker",children:"4.1. Run Ollama with Docker"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"docker run -d --gpus all -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama\n"})}),"\n",(0,o.jsx)(n.p,{children:"Now download & run a model:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"ollama run mistral\n"})}),"\n",(0,o.jsx)(n.h3,{id:"42-add-dependencies",children:"4.2. Add Dependencies"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<dependency>\n  <groupId>org.springframework.ai</groupId>\n  <artifactId>spring-ai-ollama-spring-boot-starter</artifactId>\n</dependency>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"43-properties-configuration",children:"4.3. Properties Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-properties",children:"spring.ai.ollama.embedding.options.model=mistral\nspring.ai.ollama.chat.options.model=mistral\n"})}),"\n",(0,o.jsx)(n.h3,{id:"44-demo-app---ollama-in-action",children:"4.4. Demo App - Ollama in Action"}),"\n",(0,o.jsxs)(n.p,{children:["Same as OpenAI, but powered by ",(0,o.jsx)(n.strong,{children:"Mistral"}),"! \u26a1"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-step-5-oops-too-many-dimensions",children:'\ud83d\udea8 Step 5: "Oops, Too Many Dimensions!"'}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Error:"})," ",(0,o.jsx)(n.code,{children:"column cannot have more than 2000 dimensions"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Why?"})," PgVector can\u2019t handle ",(0,o.jsx)(n.strong,{children:">2000 dimensions"})," for certain index types."]}),"\n",(0,o.jsx)(n.h3,{id:"fix-options",children:"Fix Options"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Use a different vector store (like ",(0,o.jsx)(n.strong,{children:"ChromDB"}),")."]}),"\n",(0,o.jsxs)(n.li,{children:["Set ",(0,o.jsx)(n.code,{children:"index-type=none"})," (\u26a0\ufe0f Only for dev, NOT for production!)."]}),"\n",(0,o.jsx)(n.li,{children:"Reduce dimensions under 2000."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-properties",children:"spring.ai.vectorstore.pgvector.index-type=none # Dev only!\nspring.ai.vectorstore.pgvector.dimensions=4096\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-summary---what-we-achieved-today",children:"\ud83c\udfaf Summary - What We Achieved Today"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"\u2705 Installed Postgres with PgVector extension."}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 Configured ",(0,o.jsx)(n.strong,{children:"Spring AI"})," for automatic setup."]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 Connected ",(0,o.jsx)(n.strong,{children:"PgVector"})," with OpenAI & Ollama."]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 Built a cool ",(0,o.jsx)(n.strong,{children:"Spring Boot"})," app to store & retrieve embeddings!"]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 Solved the ",(0,o.jsx)(n.strong,{children:"2000-dimension error"})," like a boss. \ud83d\ude0e"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["\ud83d\ude80 ",(0,o.jsx)(n.strong,{children:"Happy Learning & Happy Coding!"})," \ud83c\udf89"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},9666:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/spring_ai_logo-85ebfad6246caa6a26060f054d26ebc8.png"},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var i=r(6540);const o={},t=i.createContext(o);function s(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);