"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[9110],{4261:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"kits/java/Misc Topics/java-versions-features/java-10/java-var","title":"Java var Keyword - var is not keyword","description":"Java var keyword allows declaring a variable without explicitly specifying its type.","source":"@site/community/kits/java/Misc Topics/java-versions-features/java-10/java-var.md","sourceDirName":"kits/java/Misc Topics/java-versions-features/java-10","slug":"/kits/java/Misc Topics/java-versions-features/java-10/java-var","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-10/java-var","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"java-var","title":"Java var Keyword - var is not keyword","description":"Java var keyword allows declaring a variable without explicitly specifying its type.","sidebar_position":2},"sidebar":"community","previous":{"title":"Java 10 Features Intro","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-10/introduction"},"next":{"title":"Java Version \u2013 Time-Based Release Versioning","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-10/time-based-release-versioning"}}');var r=i(4848),s=i(8453);const o={id:"java-var",title:"Java var Keyword - var is not keyword",description:"Java var keyword allows declaring a variable without explicitly specifying its type.",sidebar_position:2},t=void 0,l={},d=[{value:"Java&#39;s &quot;var&quot; Keyword \u2013 Making Code Shorter and Life Easier (and Funnier!)",id:"javas-var-keyword--making-code-shorter-and-life-easier-and-funnier",level:2},{value:"The Magic of <code>var</code>",id:"the-magic-of-var",level:2},{value:"1. Declare and Initialize \u2013 A Must",id:"1-declare-and-initialize--a-must",level:3},{value:"2. <code>var</code> is NOT a Keyword! (Surprise! \ud83c\udf89)",id:"2-var-is-not-a-keyword-surprise-",level:3},{value:"3. Where Can You Use <code>var</code>? \ud83e\udd14",id:"3-where-can-you-use-var-",level:3},{value:"\u2705 Allowed",id:"-allowed",level:4},{value:"\u274c Not Allowed",id:"-not-allowed",level:4},{value:"4. Performance? No Worries! \ud83d\ude0e",id:"4-performance-no-worries-",level:3},{value:"5. Conclusion \ud83c\udfaf",id:"5-conclusion-",level:3}];function c(e){const a={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Banner java icon",src:i(3390).A+"",width:"370",height:"364"})}),"\n",(0,r.jsx)(a.h2,{id:"javas-var-keyword--making-code-shorter-and-life-easier-and-funnier",children:'Java\'s "var" Keyword \u2013 Making Code Shorter and Life Easier (and Funnier!)'}),"\n",(0,r.jsxs)(a.p,{children:["Java has been on a mission to reduce verbosity in its syntax, like a chef trimming unnecessary ingredients for a perfect dish. First, it introduced the Diamond operator ",(0,r.jsx)(a.code,{children:"<>"}),", and now, it has given us ",(0,r.jsx)(a.code,{children:"var"})," (",(0,r.jsx)(a.a,{href:"https://openjdk.org/jeps/286",children:"JEP 286"}),") to declare variables."]}),"\n",(0,r.jsxs)(a.p,{children:["So, what's the deal with ",(0,r.jsx)(a.code,{children:"var"}),"? Well, instead of writing long-winded type declarations, the compiler does the heavy lifting and infers the type for you. Think of it as Java going, ",(0,r.jsx)(a.em,{children:'"Relax, I got this!"'})," \ud83d\ude80"]}),"\n",(0,r.jsxs)(a.h2,{id:"the-magic-of-var",children:["The Magic of ",(0,r.jsx)(a.code,{children:"var"})]}),"\n",(0,r.jsx)(a.p,{children:"Consider this example:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'var str = "Hello world";\n'})}),"\n",(0,r.jsxs)(a.p,{children:["This is Java being smart and automatically understanding that ",(0,r.jsx)(a.code,{children:"str"})," is of type ",(0,r.jsx)(a.code,{children:"String"}),". Essentially, the above line is equivalent to:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'String str = "Hello world";\n'})}),"\n",(0,r.jsx)(a.h3,{id:"1-declare-and-initialize--a-must",children:"1. Declare and Initialize \u2013 A Must"}),"\n",(0,r.jsxs)(a.p,{children:["Java is quite strict about ",(0,r.jsx)(a.code,{children:"var"}),". You ",(0,r.jsx)(a.strong,{children:"must"})," initialize the variable right when you declare it. Otherwise, Java throws a tantrum (a.k.a a compilation error). \ud83d\ude31"]}),"\n",(0,r.jsx)(a.p,{children:"\u274c Bad:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"var i; // ERROR: Cannot use 'var' on variable without initializer\n"})}),"\n",(0,r.jsx)(a.p,{children:"\u2705 Good:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"var j = 10; // Works like a charm!\n"})}),"\n",(0,r.jsxs)(a.h3,{id:"2-var-is-not-a-keyword-surprise-",children:["2. ",(0,r.jsx)(a.code,{children:"var"})," is NOT a Keyword! (Surprise! \ud83c\udf89)"]}),"\n",(0,r.jsxs)(a.p,{children:["Even though ",(0,r.jsx)(a.code,{children:"var"})," ",(0,r.jsx)(a.em,{children:"looks"})," like a keyword, it isn\u2019t. This means you can have a variable ",(0,r.jsx)(a.strong,{children:"named"})," ",(0,r.jsx)(a.code,{children:"var"}),". Java won't stop you (but your teammates might). \ud83d\ude48"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'var var = 10; // Java: "Sure, why not?"\nint var = 10; // Still valid!\n'})}),"\n",(0,r.jsxs)(a.p,{children:["But just because you ",(0,r.jsx)(a.em,{children:"can"})," doesn\u2019t mean you ",(0,r.jsx)(a.em,{children:"should"}),"! (Please, think of future developers!)"]}),"\n",(0,r.jsxs)(a.h3,{id:"3-where-can-you-use-var-",children:["3. Where Can You Use ",(0,r.jsx)(a.code,{children:"var"}),"? \ud83e\udd14"]}),"\n",(0,r.jsxs)(a.p,{children:["Java is picky about where ",(0,r.jsx)(a.code,{children:"var"})," can be used. It works in:"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.strong,{children:"Local variables with initializers"})}),"\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.strong,{children:"Indexes in enhanced for-loops"})}),"\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.strong,{children:"Loop variables in traditional for-loops"})}),"\n"]}),"\n",(0,r.jsx)(a.h4,{id:"-allowed",children:"\u2705 Allowed"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'var blogName = "howtodoinjava.com"; // Local variable with initializer\n\nfor (var object : dataList) { // Enhanced for-loop index\n    System.out.println(object);\n}\n\nfor (var i = 0; i < dataList.size(); i++) { // Traditional for-loop variable\n    System.out.println(dataList.get(i));\n}\n'})}),"\n",(0,r.jsx)(a.h4,{id:"-not-allowed",children:"\u274c Not Allowed"}),"\n",(0,r.jsxs)(a.p,{children:["Java says ",(0,r.jsx)(a.strong,{children:"NO!"})," to ",(0,r.jsx)(a.code,{children:"var"})," in these cases:"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Method parameters"}),"\n",(0,r.jsx)(a.li,{children:"Constructor parameters"}),"\n",(0,r.jsx)(a.li,{children:"Method return types"}),"\n",(0,r.jsx)(a.li,{children:"Class fields"}),"\n",(0,r.jsx)(a.li,{children:"Catch block parameters"}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"public class Application {\n    // var firstName; \u274c Not allowed as class fields\n    \n    // public Application(var param) { } \u274c Not allowed as constructor parameter\n    \n    // try { } catch (var ex) { } \u274c Not allowed in catch blocks\n    \n    // public var demoMethod() { return null; } \u274c Not allowed in return types\n    \n    // public Integer demoMethod2(var input) { return null; } \u274c Not allowed in method parameters\n}\n"})}),"\n",(0,r.jsx)(a.h3,{id:"4-performance-no-worries-",children:"4. Performance? No Worries! \ud83d\ude0e"}),"\n",(0,r.jsxs)(a.p,{children:["Since Java determines the type ",(0,r.jsx)(a.strong,{children:"at compile time"}),", the resulting bytecode is identical to explicitly declared types. This means ",(0,r.jsx)(a.strong,{children:"no extra runtime processing"}),", no extra memory usage, and no performance impact. In short: Java is still lightning fast! \u26a1"]}),"\n",(0,r.jsx)(a.h3,{id:"5-conclusion-",children:"5. Conclusion \ud83c\udfaf"}),"\n",(0,r.jsxs)(a.p,{children:["Using ",(0,r.jsx)(a.code,{children:"var"})," can make code ",(0,r.jsx)(a.strong,{children:"concise"})," and ",(0,r.jsx)(a.strong,{children:"easier to read"}),", especially when dealing with complex generics. But don\u2019t overdo it\u2014too much ",(0,r.jsx)(a.code,{children:"var"})," and your code might start looking like an unsolvable puzzle. \ud83e\udde9"]}),"\n",(0,r.jsx)(a.p,{children:"Use it wisely, and Java will love you back! \u2764\ufe0f"}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Happy Coding! \ud83d\ude80"})})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},3390:(e,a,i)=>{i.d(a,{A:()=>n});const n=i.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,a,i)=>{i.d(a,{R:()=>o,x:()=>t});var n=i(6540);const r={},s=n.createContext(r);function o(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);