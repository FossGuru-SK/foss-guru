"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[9940],{8588:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"kits/java/Misc Topics/java-versions-features/java-12/introduction","title":"Java 12 Features Intro","description":"Features in short","source":"@site/community/kits/java/Misc Topics/java-versions-features/java-12/introduction.md","sourceDirName":"kits/java/Misc Topics/java-versions-features/java-12","slug":"/kits/java/Misc Topics/java-versions-features/java-12/introduction","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-12/introduction","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"introduction","title":"Java 12 Features Intro","description":"Features in short","sidebar_position":1},"sidebar":"community","previous":{"title":"Java 12","permalink":"/foss-guru/community/category/java-12"},"next":{"title":"Java 13","permalink":"/foss-guru/community/category/java-13"}}');var a=s(4848),r=s(8453);const i={id:"introduction",title:"Java 12 Features Intro",description:"Features in short",sidebar_position:1},o=void 0,l={},c=[{value:"\ud83c\udf89 Java 12 \u2013 What&#39;s New and Exciting? \ud83d\ude80",id:"-java-12--whats-new-and-exciting-",level:2},{value:"1\ufe0f\u20e3 Collectors.teeing() in Stream API \ud83c\udfaf",id:"1\ufe0f\u20e3-collectorsteeing-in-stream-api-",level:2},{value:"Example \ud83c\udfc6",id:"example-",level:3},{value:"2\ufe0f\u20e3 String API Changes \u2728",id:"2\ufe0f\u20e3-string-api-changes-",level:2},{value:"2.1. <code>String.indent()</code> \ud83c\udfe0",id:"21-stringindent-",level:3},{value:"Output",id:"output",level:4},{value:"2.2. <code>String.transform()</code> \ud83d\udd04",id:"22-stringtransform-",level:3},{value:"2.3. String Constants \ud83c\udfd7\ufe0f",id:"23-string-constants-\ufe0f",level:3},{value:"3\ufe0f\u20e3 <code>Files.mismatch(Path, Path)</code> \ud83d\udd0d",id:"3\ufe0f\u20e3-filesmismatchpath-path-",level:2},{value:"4\ufe0f\u20e3 Compact Number Formatting \ud83d\udd22",id:"4\ufe0f\u20e3-compact-number-formatting-",level:2},{value:"5\ufe0f\u20e3 Support for Unicode 11 \ud83c\udf0d",id:"5\ufe0f\u20e3-support-for-unicode-11-",level:2},{value:"6\ufe0f\u20e3 Switch Expressions (Preview) \ud83d\udd04",id:"6\ufe0f\u20e3-switch-expressions-preview-",level:2},{value:"Before (Old and Boring \ud83d\ude34)",id:"before-old-and-boring-",level:3},{value:"After (New and Sleek \u2728)",id:"after-new-and-sleek-",level:3},{value:"\ud83d\ude80 Wrapping Up",id:"-wrapping-up",level:2}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Banner java icon",src:s(3390).A+"",width:"370",height:"364"})}),"\n",(0,a.jsx)(n.h2,{id:"-java-12--whats-new-and-exciting-",children:"\ud83c\udf89 Java 12 \u2013 What's New and Exciting? \ud83d\ude80"}),"\n",(0,a.jsx)(n.p,{children:"Java 12 (released on March 19, 2019) brought some cool new features and improvements for developers and architects. Let\u2019s dive in and explore what's fresh and exciting in the world of Java! \ud83d\ude0e"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"1\ufe0f\u20e3-collectorsteeing-in-stream-api-",children:"1\ufe0f\u20e3 Collectors.teeing() in Stream API \ud83c\udfaf"}),"\n",(0,a.jsxs)(n.p,{children:["Ever wished you could process a stream into two different collectors and then merge the results? Well, Java 12 says, ",(0,a.jsx)(n.em,{children:'"Wish granted!"'})," \ud83e\uddde\u200d\u2642\ufe0f"]}),"\n",(0,a.jsxs)(n.p,{children:["The new ",(0,a.jsx)(n.code,{children:"teeing()"})," collector allows you to do exactly that! It takes two collectors, processes the stream through both, and then merges the results using a function."]}),"\n",(0,a.jsx)(n.h3,{id:"example-",children:"Example \ud83c\udfc6"}),"\n",(0,a.jsx)(n.p,{children:"Want to find both the highest and lowest salary in a single statement? Here you go:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"SalaryRange salaryRange = Stream\n        .of(56700, 67600, 45200, 120000, 77600, 85000)\n        .collect(teeing(\n                minBy(Integer::compareTo),\n                maxBy(Integer::compareTo),\n                SalaryRange::fromOptional));\n"})}),"\n",(0,a.jsx)(n.p,{children:"How cool is that? \ud83e\udd29"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"2\ufe0f\u20e3-string-api-changes-",children:"2\ufe0f\u20e3 String API Changes \u2728"}),"\n",(0,a.jsxs)(n.h3,{id:"21-stringindent-",children:["2.1. ",(0,a.jsx)(n.code,{children:"String.indent()"})," \ud83c\udfe0"]}),"\n",(0,a.jsxs)(n.p,{children:["Need to adjust the indentation of a string? Just use ",(0,a.jsx)(n.code,{children:".indent()"})," and let Java handle the whitespace for you!"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'String result = "foo\\nbar\\nbar2".indent(4);\nSystem.out.println(result);\n'})}),"\n",(0,a.jsx)(n.h4,{id:"output",children:"Output"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"    foo\n    bar\n    bar2\n"})}),"\n",(0,a.jsx)(n.p,{children:"(Note: Java even adds a newline if it's missing. Neat, right? \ud83e\udd13)"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h3,{id:"22-stringtransform-",children:["2.2. ",(0,a.jsx)(n.code,{children:"String.transform()"})," \ud83d\udd04"]}),"\n",(0,a.jsxs)(n.p,{children:["Tired of chaining multiple string operations? ",(0,a.jsx)(n.code,{children:"transform()"})," lets you apply a function to transform a string in one go!"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'List<String> names = List.of("   Alex", "brian");\nList<String> transformedNames = new ArrayList<>();\n\nfor (String name : names) {\n    String transformedName = name.transform(String::strip)\n                      .transform(StringUtils::toCamelCase);\n    transformedNames.add(transformedName);\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["\ud83d\ude80 ",(0,a.jsx)(n.strong,{children:"One method to rule them all!"})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"23-string-constants-\ufe0f",children:"2.3. String Constants \ud83c\udfd7\ufe0f"}),"\n",(0,a.jsxs)(n.p,{children:["Java 12 brings some under-the-hood improvements to the ",(0,a.jsx)(n.code,{children:"String"})," class, adding support for ",(0,a.jsx)(n.code,{children:"Constable"})," and ",(0,a.jsx)(n.code,{children:"ConstantDesc"}),". These are mostly useful for bytecode parsing and generation (looking at you, ",(0,a.jsx)(n.strong,{children:"Byte Buddy"})," users! \ud83d\udc40)."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"3\ufe0f\u20e3-filesmismatchpath-path-",children:["3\ufe0f\u20e3 ",(0,a.jsx)(n.code,{children:"Files.mismatch(Path, Path)"})," \ud83d\udd0d"]}),"\n",(0,a.jsxs)(n.p,{children:["Ever wondered how to compare two files and spot the first difference? Java 12\u2019s ",(0,a.jsx)(n.code,{children:"Files.mismatch()"})," does exactly that!"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'Path file1 = tempDir.resolve("helloworld1.txt");\nPath file2 = tempDir.resolve("helloworld2.txt");\n\nlong diff = Files.mismatch(file1, file2); // Returns position of first mismatch or -1 if identical\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Finally!"})," No more reading files manually for comparison. \ud83c\udf89"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"4\ufe0f\u20e3-compact-number-formatting-",children:"4\ufe0f\u20e3 Compact Number Formatting \ud83d\udd22"}),"\n",(0,a.jsxs)(n.p,{children:["Reading big numbers can be a headache. Who wants to see ",(0,a.jsx)(n.code,{children:"3,600,000"})," when ",(0,a.jsx)(n.code,{children:"3.6M"})," is so much easier? \ud83e\udd2f"]}),"\n",(0,a.jsxs)(n.p,{children:["Java 12 introduces ",(0,a.jsx)(n.code,{children:"NumberFormat.getCompactNumberInstance()"})," to format numbers in a compact way!"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"NumberFormat formatter = NumberFormat.getCompactNumberInstance(Locale.US, NumberFormat.Style.SHORT);\nString formattedString = formatter.format(25000L);  // 25K\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now your UI can display numbers like a pro! \ud83c\udfc6"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"5\ufe0f\u20e3-support-for-unicode-11-",children:"5\ufe0f\u20e3 Support for Unicode 11 \ud83c\udf0d"}),"\n",(0,a.jsxs)(n.p,{children:["Java 12 now supports ",(0,a.jsx)(n.strong,{children:"Unicode 11"}),", bringing ",(0,a.jsx)(n.strong,{children:"684 new characters"})," (including new emojis! \ud83c\udf89\ud83d\udd25\ud83e\udd23)."]}),"\n",(0,a.jsxs)(n.p,{children:["Now you can safely use ",(0,a.jsx)(n.strong,{children:"\ud83e\udd84, \ud83e\udd51, and \ud83e\udd16"})," in your Java programs! \ud83c\udf88"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"6\ufe0f\u20e3-switch-expressions-preview-",children:"6\ufe0f\u20e3 Switch Expressions (Preview) \ud83d\udd04"}),"\n",(0,a.jsxs)(n.p,{children:["Switch statements just got a major ",(0,a.jsx)(n.strong,{children:"upgrade"}),"! \ud83d\ude80 Instead of writing verbose case blocks, you can now use ",(0,a.jsx)(n.strong,{children:"arrow syntax"})," and directly assign values!"]}),"\n",(0,a.jsx)(n.h3,{id:"before-old-and-boring-",children:"Before (Old and Boring \ud83d\ude34)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'boolean isWeekend = switch (day)\n        {\n            case MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY -> false;\n\n            case SATURDAY, SUNDAY -> true;\n\n            default -> throw new IllegalStateException("Illegal day entry :: " + day);\n        };\n\n        System.out.println(isWeekend);  //true or false - based on current day\n'})}),"\n",(0,a.jsx)(n.h3,{id:"after-new-and-sleek-",children:"After (New and Sleek \u2728)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'boolean isWeekend = switch (day) {\n  case MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY -> false;\n  case SATURDAY, SUNDAY -> true;\n  default -> throw new IllegalStateException("Illegal day entry :: " + day);\n};\n'})}),"\n",(0,a.jsxs)(n.p,{children:["\ud83d\udd25 ",(0,a.jsx)(n.strong,{children:"Less code, more readability!"})," (Don't forget to enable preview mode: ",(0,a.jsx)(n.code,{children:"--enable-preview"}),")"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-wrapping-up",children:"\ud83d\ude80 Wrapping Up"}),"\n",(0,a.jsx)(n.p,{children:"Java 12 may not be an LTS release, but it surely packs some great features! From powerful collectors to better string handling and improved file operations, there's a lot to love! \u2764\ufe0f"}),"\n",(0,a.jsx)(n.p,{children:"Got questions? Drop them in the comments (or just code them away! \ud83d\ude06)."}),"\n",(0,a.jsx)(n.p,{children:"Happy Learning and Happy Coding! \ud83c\udf89\ud83d\udc68\u200d\ud83d\udcbb\ud83d\udc69\u200d\ud83d\udcbb"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},3390:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(6540);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);