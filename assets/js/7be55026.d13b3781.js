"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[5297],{9680:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"kits/java/Misc Topics/java-versions-features/java-10/time-based-release-versioning","title":"Java Version \u2013 Time-Based Release Versioning","description":"Starting from Java 10, Oracle has adapted time based version-string scheme [JEP 322].","source":"@site/community/kits/java/Misc Topics/java-versions-features/java-10/time-based-release-versioning.md","sourceDirName":"kits/java/Misc Topics/java-versions-features/java-10","slug":"/kits/java/Misc Topics/java-versions-features/java-10/time-based-release-versioning","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-10/time-based-release-versioning","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"time-based-release-versioning","title":"Java Version \u2013 Time-Based Release Versioning","description":"Starting from Java 10, Oracle has adapted time based version-string scheme [JEP 322].","sidebar_position":3},"sidebar":"community","previous":{"title":"Java var Keyword - var is not keyword","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-10/java-var"},"next":{"title":"Java 11 [LTS]","permalink":"/foss-guru/community/category/java-11-lts"}}');var i=n(4848),a=n(8453);const t={id:"time-based-release-versioning",title:"Java Version \u2013 Time-Based Release Versioning",description:"Starting from Java 10, Oracle has adapted time based version-string scheme [JEP 322].",sidebar_position:3},o=void 0,l={},d=[{value:"Java Versioning Scheme (JEP 322)",id:"java-versioning-scheme-jep-322",level:2},{value:"Update Releases",id:"update-releases",level:2},{value:"Java Version Format",id:"java-version-format",level:2},{value:"New Version Format",id:"new-version-format",level:3},{value:"Java Version API",id:"java-version-api",level:2},{value:"Parse an Existing Version",id:"parse-an-existing-version",level:3},{value:"Long-Term Support (LTS) \ud83d\udd25",id:"long-term-support-lts-",level:2},{value:"Happy Learning! \ud83d\ude80",id:"happy-learning-",level:3}];function c(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Banner java icon",src:n(3390).A+"",width:"370",height:"364"})}),"\n",(0,i.jsx)(s.h2,{id:"java-versioning-scheme-jep-322",children:"Java Versioning Scheme (JEP 322)"}),"\n",(0,i.jsxs)(s.p,{children:["Starting from ",(0,i.jsx)(s.strong,{children:"Java 10"}),", Oracle has adapted a ",(0,i.jsx)(s.strong,{children:"time-based version-string scheme"})," (",(0,i.jsx)(s.a,{href:"http://openjdk.java.net/jeps/322",children:"JEP 322"}),"). The new time-based model has replaced the feature-based, multi-year release model of the past. Unlike the old releases, the new ",(0,i.jsx)(s.strong,{children:"time-based releases will not be delayed"}),", and features will be released ",(0,i.jsx)(s.strong,{children:"every six months"}),", with no constraints on what features can go out in the releases."]}),"\n",(0,i.jsx)(s.h2,{id:"update-releases",children:"Update Releases"}),"\n",(0,i.jsxs)(s.p,{children:["Update releases will occur ",(0,i.jsx)(s.strong,{children:"every quarter"})," ",(0,i.jsx)(s.em,{children:"(January, April, July, October)"}),". These update releases will be strictly limited to:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Fixes of security issues \ud83d\udd12"}),"\n",(0,i.jsx)(s.li,{children:"Regressions \ud83d\udee0\ufe0f"}),"\n",(0,i.jsx)(s.li,{children:"Bugs in newer features \ud83d\udc1b"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Each feature release will receive ",(0,i.jsx)(s.strong,{children:"two updates"})," before the next feature release."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"java-version-format",children:"Java Version Format"}),"\n",(0,i.jsxs)(s.p,{children:["If you run the command ",(0,i.jsx)(s.code,{children:"java -version"})," in your terminal/command prompt, you'll see output similar to:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sh",children:'C:\\Users\\Lokesh>java -version\njava version "10.0.1" 2018-04-17\nJava(TM) SE Runtime Environment 18.3 (build 10.0.1+10)\nJava HotSpot(TM) 64-Bit Server VM 18.3 (build 10.0.1+10, mixed mode)\n'})}),"\n",(0,i.jsx)(s.h3,{id:"new-version-format",children:"New Version Format"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-plaintext",children:"$FEATURE.$INTERIM.$UPDATE.$PATCH\n"})}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Counter"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"$FEATURE"})}),(0,i.jsxs)(s.td,{children:["Incremented every ",(0,i.jsx)(s.strong,{children:"6 months"})," based on feature releases (e.g., JDK 10, JDK 11). (Formerly ",(0,i.jsx)(s.code,{children:"$MAJOR"}),".)"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"$INTERIM"})}),(0,i.jsxs)(s.td,{children:["Usually ",(0,i.jsx)(s.strong,{children:"zero"}),", as there are no interim releases in a 6-month period. It increases for non-feature releases that contain ",(0,i.jsx)(s.strong,{children:"compatible bug fixes and enhancements"}),", but no incompatible changes. (Formerly ",(0,i.jsx)(s.code,{children:"$MINOR"}),".)"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"$UPDATE"})}),(0,i.jsxs)(s.td,{children:["Incremented for ",(0,i.jsx)(s.strong,{children:"compatible update releases"})," that fix security issues, regressions, and bugs in newer features. (Formerly ",(0,i.jsx)(s.code,{children:"$SECURITY"}),".)"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"$PATCH"})}),(0,i.jsxs)(s.td,{children:["Incremented only for ",(0,i.jsx)(s.strong,{children:"emergency releases"})," to fix critical issues."]})]})]})]}),"\n",(0,i.jsxs)(s.p,{children:["Version numbers are compared ",(0,i.jsx)(s.strong,{children:"numerically"})," and ",(0,i.jsx)(s.strong,{children:"pointwise"}),". Examples:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"10.0.4"})," is ",(0,i.jsx)(s.strong,{children:"less than"})," ",(0,i.jsx)(s.code,{children:"10.1.2"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"10.0.2"})," is ",(0,i.jsx)(s.strong,{children:"less than"})," ",(0,i.jsx)(s.code,{children:"10.0.2.1"})," (missing elements are considered smaller)"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"java-version-api",children:"Java Version API"}),"\n",(0,i.jsxs)(s.p,{children:["Want to get version details programmatically? Use ",(0,i.jsx)(s.code,{children:"Runtime.version()"}),"! \ud83c\udfaf"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"Version version = Runtime.version();\nSystem.out.println(version.feature());  // 10\nSystem.out.println(version.interim());  // 0\nSystem.out.println(version.update());   // 1\nSystem.out.println(version.patch());    // 0\n"})}),"\n",(0,i.jsx)(s.h3,{id:"parse-an-existing-version",children:"Parse an Existing Version"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'Version version = Runtime.Version.parse("10.0.1");\nSystem.out.println(version.feature());  // 10\nSystem.out.println(version.interim());  // 0\nSystem.out.println(version.update());   // 1\nSystem.out.println(version.patch());    // 0\n'})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"long-term-support-lts-",children:"Long-Term Support (LTS) \ud83d\udd25"}),"\n",(0,i.jsxs)(s.p,{children:["LTS versions are mainly for ",(0,i.jsx)(s.strong,{children:"enterprise customers"}),". These versions:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Offer ",(0,i.jsx)(s.strong,{children:"premier and sustained support"})," from Oracle"]}),"\n",(0,i.jsxs)(s.li,{children:["Are targeted ",(0,i.jsx)(s.strong,{children:"every 3 years"})]}),"\n",(0,i.jsxs)(s.li,{children:["Receive updates for ",(0,i.jsx)(s.strong,{children:"at least three years"})]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["LTS versions will ",(0,i.jsx)(s.strong,{children:'explicitly display "LTS"'})," in the output of ",(0,i.jsx)(s.code,{children:"java -version"}),". Example:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-plaintext",children:"11.0.2+13-LTS\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"happy-learning-",children:"Happy Learning! \ud83d\ude80"})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3390:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>o});var r=n(6540);const i={},a=r.createContext(i);function t(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);