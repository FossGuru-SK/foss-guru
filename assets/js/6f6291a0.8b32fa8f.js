"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[9254],{7546:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"kits/java/Java Language Basics/Naming Conventions","title":"Naming Conventions","description":"Java Language Naming Conventions","source":"@site/community/kits/java/Java Language Basics/naming-conventions.md","sourceDirName":"kits/java/Java Language Basics","slug":"/kits/java/Java Language Basics/Naming Conventions","permalink":"/foss-guru/community/kits/java/Java Language Basics/Naming Conventions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"Naming Conventions","title":"Naming Conventions","description":"Java Language Naming Conventions","sidebar_position":3},"sidebar":"community","previous":{"title":"Installation","permalink":"/foss-guru/community/kits/java/Java Language Basics/Installation"},"next":{"title":"Keywords","permalink":"/foss-guru/community/kits/java/Java Language Basics/Keywords"}}');var i=a(4848),t=a(8453);const o={id:"Naming Conventions",title:"Naming Conventions",description:"Java Language Naming Conventions",sidebar_position:3},r=void 0,l={},c=[{value:"A Guide to Naming Stuff Like a Pro (and Not a Monster)",id:"a-guide-to-naming-stuff-like-a-pro-and-not-a-monster",level:2},{value:"1. Classes and Interfaces",id:"1-classes-and-interfaces",level:3},{value:"2. Methods",id:"2-methods",level:3},{value:"3. Variables",id:"3-variables",level:3},{value:"4. Constants",id:"4-constants",level:3},{value:"5. Packages",id:"5-packages",level:3},{value:"6. Camel Case vs. Snake Case",id:"6-camel-case-vs-snake-case",level:3},{value:"7. Why Naming Conventions Matter",id:"7-why-naming-conventions-matter",level:3},{value:"8. Naming Generic Types",id:"8-naming-generic-types",level:3},{value:"9. Naming Enums",id:"9-naming-enums",level:3},{value:"10. Bonus: Naming Crimes to Avoid",id:"10-bonus-naming-crimes-to-avoid",level:3}];function d(e){const n={blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Banner java icon",src:a(3390).A+"",width:"370",height:"364"})}),"\n",(0,i.jsx)(n.h2,{id:"a-guide-to-naming-stuff-like-a-pro-and-not-a-monster",children:"A Guide to Naming Stuff Like a Pro (and Not a Monster)"}),"\n",(0,i.jsx)(n.p,{children:"Naming things in programming is hard. Like, \u201ctrying to fold a fitted sheet\u201d hard. But fear not! Java naming conventions exist to bring order to chaos and prevent your code from looking like a toddler\u2019s scribble on a wall."}),"\n",(0,i.jsx)(n.p,{children:"Here\u2019s a crash course in how to name things in Java without accidentally summoning the coding gods\u2019 wrath."}),"\n",(0,i.jsx)(n.h3,{id:"1-classes-and-interfaces",children:"1. Classes and Interfaces"}),"\n",(0,i.jsx)(n.p,{children:"Rule: Class and interface names should be nouns, start with an uppercase letter, and use camel case.\nWhy? Because your class is a big deal\u2014it deserves to stand tall and proud."}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 UserAccount, MagicPotion, SpaceShip ",(0,i.jsx)(n.br,{}),"\n","\u274c myclass, classyMcClassFace, thingy"]}),"\n",(0,i.jsx)(n.p,{children:"Funny Tip:\n\"Naming a class Thing is like naming your dog 'Dog.' Sure, it works, but good luck explaining it to anyone.\""}),"\n",(0,i.jsx)(n.h3,{id:"2-methods",children:"2. Methods"}),"\n",(0,i.jsx)(n.p,{children:"Rule: Method names should be verbs or action phrases, start with a lowercase letter, and use camel case.\nWhy? Because methods do stuff, and verbs scream action!"}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 getUserName(), launchRocket(), mixPotion() ",(0,i.jsx)(n.br,{}),"\n","\u274c doStuff(), thing(), launch (seriously, launch what?!)"]}),"\n",(0,i.jsx)(n.p,{children:"Funny Tip:\n\"A method named doStuff() is like telling someone, 'Go somewhere and do something.' Sure, it\u2019s a command, but it\u2019s not helpful!\""}),"\n",(0,i.jsx)(n.h3,{id:"3-variables",children:"3. Variables"}),"\n",(0,i.jsx)(n.p,{children:"Rule: Variables should be short, meaningful names written in camel case, starting with a lowercase letter.\nWhy? Because variables are like labels\u2014they should tell you what\u2019s inside."}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 userName, rocketFuel, magicPotionCount ",(0,i.jsx)(n.br,{}),"\n","\u274c x, stuff, bananaVariable123"]}),"\n",(0,i.jsx)(n.p,{children:'Funny Tip:\n"If your variable name requires an explanation in the comments, you\u2019ve failed. Name it well, or prepare to write an essay."'}),"\n",(0,i.jsx)(n.h3,{id:"4-constants",children:"4. Constants"}),"\n",(0,i.jsx)(n.p,{children:'Rule: Constants should be all uppercase with words separated by underscores.\nWhy? Because constants are loud and proud\u2014think of them as the code equivalent of someone shouting, "THIS VALUE NEVER CHANGES!"'}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 MAX_USERS, PI, DEFAULT_TIMEOUT ",(0,i.jsx)(n.br,{}),"\n","\u274c maxusers, neverChange, constantBro"]}),"\n",(0,i.jsx)(n.p,{children:'Funny Tip:\n"Naming a constant PI is cool. Naming it Pie is cruel. Don\u2019t trick your future self into thinking dessert is involved."'}),"\n",(0,i.jsx)(n.h3,{id:"5-packages",children:"5. Packages"}),"\n",(0,i.jsx)(n.p,{children:"Rule: Package names should be lowercase, concise, and use dot notation to organize logically.\nWhy? Because packages are like folders\u2014clean organization makes everything easier to find."}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 com.company.projectname, org.example.utils ",(0,i.jsx)(n.br,{}),"\n","\u274c com.example.MyProjectFolder, junk.drawer"]}),"\n",(0,i.jsx)(n.p,{children:'Funny Tip:\n"Packages are like your closet\u2014keep it organized, or you\u2019ll be digging through chaos to find that one pair of socks (or class)."'}),"\n",(0,i.jsx)(n.h3,{id:"6-camel-case-vs-snake-case",children:"6. Camel Case vs. Snake Case"}),"\n",(0,i.jsx)(n.p,{children:'Camel Case: Words are smushed together, and each new word starts with a capital letter. E.g., camelCaseIsCool.\nSnake Case: Words are separated by underscores. E.g., snake_case_is_slow_and_steady.\nFunny Analogy:\n"Camel case is like a smooth roller coaster\u2014up and down, but sleek. Snake case is like crawling on the ground. Use camel case unless explicitly told otherwise."'}),"\n",(0,i.jsx)(n.h3,{id:"7-why-naming-conventions-matter",children:"7. Why Naming Conventions Matter"}),"\n",(0,i.jsx)(n.p,{children:"Readability: Your code should be understandable even to a sleep-deprived programmer.\nMaintainability: Clear names make debugging feel less like solving a crime.\nTeamwork: Your teammates will hate you less if your names make sense. (Or at least hate you for other reasons.)"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"}),"\nSince Java 9, the single character ",(0,i.jsx)(n.code,{children:"_"})," is an invalid name for a variable, but _a and __ (a double ",(0,i.jsx)(n.code,{children:"_"})," ) are legal names."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"8-naming-generic-types",children:"8. Naming Generic Types"}),"\n",(0,i.jsx)(n.p,{children:"Generic type parameter names should be uppercase single letters. The letter 'T' for type is typically recommended. In JDK classes, E is used for collection elements, S is used for service loaders, and K and V are used for map keys and values."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"public interface Map <K,V> {}\n\npublic interface List<E> extends Collection<E> {}\n\nIterator<E> iterator() {}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"9-naming-enums",children:"9. Naming Enums"}),"\n",(0,i.jsx)(n.p,{children:"Similar to class constants, enumeration names should be all uppercase letters."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"enum Direction {NORTH, EAST, SOUTH, WEST}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"10-bonus-naming-crimes-to-avoid",children:"10. Bonus: Naming Crimes to Avoid"}),"\n",(0,i.jsx)(n.p,{children:"Here are a few naming sins that\u2019ll have your future self shaking their fist at past you:"}),"\n",(0,i.jsxs)(n.p,{children:["The Vague Name:\n",(0,i.jsx)(n.code,{children:"stuff"}),", ",(0,i.jsx)(n.code,{children:"data"}),", ",(0,i.jsx)(n.code,{children:"thingy"})," ",(0,i.jsx)(n.br,{}),"\n",'"You knew what it meant once. Now it\u2019s a mystery!"']}),"\n",(0,i.jsxs)(n.p,{children:["The Overly Long Name:\n",(0,i.jsx)(n.code,{children:"theNumberOfUsersWhoLoggedInTodayAndAlsoCheckedNotifications"})," ",(0,i.jsx)(n.br,{}),"\n",'"Cool story, but TL;DR."']}),"\n",(0,i.jsxs)(n.p,{children:["The Copy-Paste Disaster:\n",(0,i.jsx)(n.code,{children:"temp"}),", ",(0,i.jsx)(n.code,{children:"temp2"}),", ",(0,i.jsx)(n.code,{children:"temp3"})," ",(0,i.jsx)(n.br,{}),"\n","\"Nothing says 'I stopped caring' like a chain of temps.\""]}),"\n",(0,i.jsxs)(n.p,{children:["The Joke Name:\nlol, wut, yolo ",(0,i.jsx)(n.br,{}),"\n",'"Funny now, embarrassing later."']})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},3390:(e,n,a)=>{a.d(n,{A:()=>s});const s=a.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>r});var s=a(6540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);