"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[4824],{4206:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"kits/java/Java Language Basics/pass-by-reference-value","title":"Java Pass-by-Value-or-by-Reference","description":"Java Language Pass-by-Value or Pass-by-Reference","source":"@site/community/kits/java/Java Language Basics/pass-by-reference-value.md","sourceDirName":"kits/java/Java Language Basics","slug":"/kits/java/Java Language Basics/pass-by-reference-value","permalink":"/foss-guru/community/kits/java/Java Language Basics/pass-by-reference-value","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":16,"frontMatter":{"id":"pass-by-reference-value","title":"Java Pass-by-Value-or-by-Reference","description":"Java Language Pass-by-Value or Pass-by-Reference","sidebar_position":16},"sidebar":"community","previous":{"title":"Java Statement","permalink":"/foss-guru/community/kits/java/Java Language Basics/statement"},"next":{"title":"Immutable Classes in Java","permalink":"/foss-guru/community/kits/java/Java Language Basics/immutable-class"}}');var i=s(4848),r=s(8453);const t={id:"pass-by-reference-value",title:"Java Pass-by-Value-or-by-Reference",description:"Java Language Pass-by-Value or Pass-by-Reference",sidebar_position:16},c=void 0,l={},o=[{value:"\ud83c\udfad Java: Pass-by-Value vs. Pass-by-Reference \u2013 The Final Verdict",id:"-java-pass-by-value-vs-pass-by-reference--the-final-verdict",level:2},{value:"\ud83c\udfaf 1. Java is Pass-by-Value (No, Really!)",id:"-1-java-is-pass-by-value-no-really",level:2},{value:"\ud83d\udca1 Proof by Code (Because Seeing is Believing)",id:"-proof-by-code-because-seeing-is-believing",level:3},{value:"\ud83d\udd0d 2. Breaking It Down \u2013 Step by Step",id:"-2-breaking-it-down--step-by-step",level:2},{value:"Step 1\ufe0f\u20e3",id:"step-1\ufe0f\u20e3",level:3},{value:"Step 2\ufe0f\u20e3",id:"step-2\ufe0f\u20e3",level:3},{value:"Step 3\ufe0f\u20e3",id:"step-3\ufe0f\u20e3",level:3},{value:"Step 4\ufe0f\u20e3",id:"step-4\ufe0f\u20e3",level:3},{value:"Step 5\ufe0f\u20e3",id:"step-5\ufe0f\u20e3",level:3},{value:"Step 6\ufe0f\u20e3",id:"step-6\ufe0f\u20e3",level:3},{value:"Step 7\ufe0f\u20e3",id:"step-7\ufe0f\u20e3",level:3},{value:"\ud83c\udf89 Conclusion: Java is Pass-by-Value",id:"-conclusion-java-is-pass-by-value",level:2}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Banner java icon",src:s(4769).A+"",width:"370",height:"364"})}),"\n",(0,i.jsx)(n.h2,{id:"-java-pass-by-value-vs-pass-by-reference--the-final-verdict",children:"\ud83c\udfad Java: Pass-by-Value vs. Pass-by-Reference \u2013 The Final Verdict"}),"\n",(0,i.jsxs)(n.p,{children:["There\u2019s been an age-old debate: ",(0,i.jsx)(n.em,{children:'"Is Java pass-by-value or pass-by-reference?"'})," \ud83e\udd14 Well, let\u2019s put this mystery to rest once and for all. Java is ",(0,i.jsx)(n.strong,{children:"pass-by-value"}),". Period. Full stop. \ud83c\udfa4\u2b07\ufe0f"]}),"\n",(0,i.jsx)(n.p,{children:"If Java were pass-by-reference, we\u2019d be able to swap objects like in C, but alas, we can\u2019t! (If you just gasped in horror, don\u2019t worry\u2014keep reading.)"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-1-java-is-pass-by-value-no-really",children:"\ud83c\udfaf 1. Java is Pass-by-Value (No, Really!)"}),"\n",(0,i.jsxs)(n.p,{children:["When you pass an object to a method, its ",(0,i.jsx)(n.strong,{children:"memory address"})," (reference) is copied into a new variable, which means both point to the same instance. However, if you change the reference inside the method, the original reference remains blissfully unchanged."]}),"\n",(0,i.jsx)(n.p,{children:"If Java were pass-by-reference, changing the reference inside a method would also change the original reference\u2014but it doesn\u2019t! \ud83d\udd0d"}),"\n",(0,i.jsx)(n.h3,{id:"-proof-by-code-because-seeing-is-believing",children:"\ud83d\udca1 Proof by Code (Because Seeing is Believing)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class Foo {\n    private String attribute;\n\n    public Foo(String a) {\n        this.attribute = a;\n    }\n    \n    public String getAttribute() {\n        return attribute;\n    }\n    \n    public void setAttribute(String attribute) {\n        this.attribute = attribute;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Foo f = new Foo("f");\n        changeReference(f); // \u274c Won\u2019t change the original reference!\n        modifyReference(f); // \u2705 Will modify the object\u2019s attribute!\n    }\n    \n    public static void changeReference(Foo a) {\n        Foo b = new Foo("b");\n        a = b;  // This changes only \'a\', not the original reference!\n    }\n    \n    public static void modifyReference(Foo c) {\n        c.setAttribute("c");  // This modifies the actual object referenced by \'f\'!\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-2-breaking-it-down--step-by-step",children:"\ud83d\udd0d 2. Breaking It Down \u2013 Step by Step"}),"\n",(0,i.jsx)(n.p,{children:"Let\u2019s analyze what happens at runtime:"}),"\n",(0,i.jsx)(n.h3,{id:"step-1\ufe0f\u20e3",children:"Step 1\ufe0f\u20e3"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Foo f = new Foo("f");\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udc49 Creates an instance of ",(0,i.jsx)(n.code,{children:"Foo"})," with ",(0,i.jsx)(n.code,{children:'attribute = "f"'}),", and ",(0,i.jsx)(n.code,{children:"f"})," holds a reference to this object."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-2\ufe0f\u20e3",children:"Step 2\ufe0f\u20e3"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public static void changeReference(Foo a)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udc49 A new reference ",(0,i.jsx)(n.code,{children:"a"})," is declared and initially assigned ",(0,i.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-3\ufe0f\u20e3",children:"Step 3\ufe0f\u20e3"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"changeReference(f);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udc49 When calling ",(0,i.jsx)(n.code,{children:"changeReference(f)"}),", ",(0,i.jsx)(n.code,{children:"a"})," gets assigned the same reference as ",(0,i.jsx)(n.code,{children:"f"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-4\ufe0f\u20e3",children:"Step 4\ufe0f\u20e3"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Foo b = new Foo("b");  // inside changeReference method\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udc49 A new ",(0,i.jsx)(n.code,{children:"Foo"})," instance is created, and ",(0,i.jsx)(n.code,{children:"b"})," now references it."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-5\ufe0f\u20e3",children:"Step 5\ufe0f\u20e3"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"a = b;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,i.jsx)(n.em,{children:"Oops!"})," This only changes ",(0,i.jsx)(n.code,{children:"a"})," inside the method. ",(0,i.jsx)(n.code,{children:"f"})," is still pointing to its original object. ",(0,i.jsxs)(n.strong,{children:["No change for ",(0,i.jsx)(n.code,{children:"f"}),"!"]})," \ud83d\ude43"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-6\ufe0f\u20e3",children:"Step 6\ufe0f\u20e3"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"modifyReference(Foo c);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,i.jsx)(n.code,{children:"c"})," is another reference to the same object as ",(0,i.jsx)(n.code,{children:"f"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-7\ufe0f\u20e3",children:"Step 7\ufe0f\u20e3"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'c.setAttribute("c");\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,i.jsx)(n.strong,{children:"Boom!"})," \ud83d\udca5 The object's attribute is modified, so ",(0,i.jsx)(n.code,{children:"f.getAttribute()"}),' now returns "c".']}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-conclusion-java-is-pass-by-value",children:"\ud83c\udf89 Conclusion: Java is Pass-by-Value"}),"\n",(0,i.jsxs)(n.p,{children:["If Java were pass-by-reference, ",(0,i.jsx)(n.code,{children:"changeReference(f);"})," would have changed the original reference, but it didn\u2019t. Instead, ",(0,i.jsx)(n.code,{children:"modifyReference(f);"})," worked because it changed the ",(0,i.jsx)(n.strong,{children:"object\u2019s state"}),", not its reference. \ud83e\udde0\ud83d\udca1"]}),"\n",(0,i.jsxs)(n.p,{children:["So next time someone asks ",(0,i.jsx)(n.em,{children:'"Is Java pass-by-reference?"'})," just smile and drop this article on them. \ud83d\ude0f"]}),"\n",(0,i.jsx)(n.p,{children:"Happy Learning! \ud83d\ude80"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},4769:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var a=s(6540);const i={},r=a.createContext(i);function t(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);