"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[9527],{790:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"kits/java/Java OOP/building-blocks-of-oops/inheritance","title":"Java Inheritance","description":"Java Inheritance refers to the ability of a child class to inherit all the non-private properties and methods from the parent class.","source":"@site/community/kits/java/Java OOP/building-blocks-of-oops/inheritance.md","sourceDirName":"kits/java/Java OOP/building-blocks-of-oops","slug":"/kits/java/Java OOP/building-blocks-of-oops/inheritance","permalink":"/foss-guru/community/kits/java/Java OOP/building-blocks-of-oops/inheritance","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"inheritance","title":"Java Inheritance","description":"Java Inheritance refers to the ability of a child class to inherit all the non-private properties and methods from the parent class.","sidebar_position":4},"sidebar":"community","previous":{"title":"Abstraction in Java","permalink":"/foss-guru/community/kits/java/Java OOP/building-blocks-of-oops/abstraction"},"next":{"title":"Multiple Inheritance in Java","permalink":"/foss-guru/community/kits/java/Java OOP/building-blocks-of-oops/multiple-inheritance"}}');var s=a(4848),t=a(8453);const r={id:"inheritance",title:"Java Inheritance",description:"Java Inheritance refers to the ability of a child class to inherit all the non-private properties and methods from the parent class.",sidebar_position:4},l=void 0,c={},o=[{value:"\ud83c\udfc6 Inheritance in Java \u2013 The Fun Way! \ud83c\udf89",id:"-inheritance-in-java--the-fun-way-",level:2},{value:"\ud83e\uddd0 1. What is Inheritance in Java?",id:"-1-what-is-inheritance-in-java",level:2},{value:"\ud83d\ude80 2. Inheritance in Action",id:"-2-inheritance-in-action",level:2},{value:"\ud83c\udf33 3. Types of Inheritance",id:"-3-types-of-inheritance",level:2},{value:"\ud83c\udfe0 3.1 Single Inheritance",id:"-31-single-inheritance",level:3},{value:"\ud83c\udfd7\ufe0f 3.2 Multi-level Inheritance",id:"\ufe0f-32-multi-level-inheritance",level:3},{value:"\ud83c\udf33 3.3 Hierarchical Inheritance",id:"-33-hierarchical-inheritance",level:3},{value:"\ud83e\udd39 3.4 Multiple Inheritance (via Interfaces)",id:"-34-multiple-inheritance-via-interfaces",level:3},{value:"\ud83c\udfaf 4. Accessing Parent Class Members",id:"-4-accessing-parent-class-members",level:2},{value:"\ud83c\udf81 4.1 Constructors",id:"-41-constructors",level:3},{value:"\ud83d\udd0d 4.2 Fields",id:"-42-fields",level:3},{value:"\ud83c\udfac 4.3 Methods",id:"-43-methods",level:3},{value:"\ud83c\udf89 5. Conclusion",id:"-5-conclusion",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Banner java icon",src:a(3390).A+"",width:"370",height:"364"})}),"\n",(0,s.jsx)(n.h2,{id:"-inheritance-in-java--the-fun-way-",children:"\ud83c\udfc6 Inheritance in Java \u2013 The Fun Way! \ud83c\udf89"}),"\n",(0,s.jsx)(n.p,{children:"Inheritance in Java is like getting superpowers from your parents. Imagine if you could inherit your dad\u2019s driving skills or your mom\u2019s cooking expertise\u2014well, in Java, classes can do just that! \ud83d\ude0e"}),"\n",(0,s.jsx)(n.p,{children:"Inheritance is one of the four pillars of object-oriented programming (OOP), allowing child classes to acquire all the non-private goodies (properties and methods) from their parent class. It\u2019s like getting hand-me-downs but way more useful! \ud83c\udfd7\ufe0f"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-1-what-is-inheritance-in-java",children:"\ud83e\uddd0 1. What is Inheritance in Java?"}),"\n",(0,s.jsxs)(n.p,{children:["In Java, inheritance means a class (child/subclass) extends another class (parent/superclass) to inherit its properties. The magic keyword here is ",(0,s.jsx)(n.code,{children:"extends"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class Parent {\n}\n\npublic class Child extends Parent {  // The child class is extending the Parent class\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"\ud83d\udc76 \u27a1\ufe0f \ud83e\uddd1 Just like how a child inherits traits from their parents, Java classes do the same!"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-2-inheritance-in-action",children:"\ud83d\ude80 2. Inheritance in Action"}),"\n",(0,s.jsxs)(n.p,{children:["Let\u2019s say we have an ",(0,s.jsx)(n.code,{children:"Employee"})," class. Every employee has basic details, but some employees (like managers) have extra perks\u2014like subordinates! \ud83e\udd35"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class Employee {\n    private Long id;\n    private String firstName;\n    private String lastName;\n    // Getters and Setters\n}\n\npublic class Manager extends Employee {\n    private List<Employee> subordinates;\n\n    public Manager(long id, String firstName, String lastName, List<Employee> subordinates) {\n        super(id, firstName, lastName);\n        this.subordinates = subordinates;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udc40 Now, let\u2019s test if our ",(0,s.jsx)(n.code,{children:"Manager"})," class got the employee attributes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'Manager manager = new Manager(1L, "Sujit", "Karne", List.of(new Employee(2L, "Alex", "Dave")));\nSystem.out.println(manager);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udda8\ufe0f ",(0,s.jsx)(n.strong,{children:"Output:"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Manager{id=1, firstName='Sujit', lastName='Karne', subordinates=[Employee{id=2, firstName='Alex', lastName='Dave'}]}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Without inheritance, we would have written ",(0,s.jsx)(n.code,{children:"id"}),", ",(0,s.jsx)(n.code,{children:"firstName"}),", and ",(0,s.jsx)(n.code,{children:"lastName"})," in multiple places\u2014yuck! \ud83e\udd22 Code duplication = bad. Reusability = good. \u2705"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-3-types-of-inheritance",children:"\ud83c\udf33 3. Types of Inheritance"}),"\n",(0,s.jsx)(n.p,{children:"Java supports four types of inheritance, depending on how classes are structured."}),"\n",(0,s.jsx)(n.h3,{id:"-31-single-inheritance",children:"\ud83c\udfe0 3.1 Single Inheritance"}),"\n",(0,s.jsx)(n.p,{children:'A single child class extends a single parent class. This is the "one kid, one parent" scenario.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'class Animal {\n    void makeSound() {\n        System.out.println("Some sound");\n    }\n}\nclass Dog extends Animal {\n    void bark() {\n        System.out.println("Woof!");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-32-multi-level-inheritance",children:"\ud83c\udfd7\ufe0f 3.2 Multi-level Inheritance"}),"\n",(0,s.jsx)(n.p,{children:"This is like a grandparent-parent-child relationship."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'class Grandparent {\n    void wisdom() {\n        System.out.println("Grandparents are wise");\n    }\n}\nclass Parent extends Grandparent {\n    void experience() {\n        System.out.println("Parents are experienced");\n    }\n}\nclass Child extends Parent {\n    void energy() {\n        System.out.println("Children have energy");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"-33-hierarchical-inheritance",children:"\ud83c\udf33 3.3 Hierarchical Inheritance"}),"\n",(0,s.jsx)(n.p,{children:"One parent, multiple children. Imagine one powerful superhero (parent) and multiple sidekicks (children)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'class Parent {\n    void parentMethod() {\n        System.out.println("Parent method");\n    }\n}\nclass Child1 extends Parent {\n}\nclass Child2 extends Parent {\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"-34-multiple-inheritance-via-interfaces",children:"\ud83e\udd39 3.4 Multiple Inheritance (via Interfaces)"}),"\n",(0,s.jsx)(n.p,{children:"Java doesn\u2019t allow multiple inheritance with classes, but we can achieve it with interfaces. Think of it as inheriting different superpowers from different sources. \ud83d\udcaa"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'interface Flyable {\n    void fly();\n}\ninterface Swimmable {\n    void swim();\n}\nclass Superhero implements Flyable, Swimmable {\n    public void fly() { System.out.println("Flying high!"); }\n    public void swim() { System.out.println("Swimming fast!"); }\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"NOTE:"})})," Till JDK 1.7, multiple inheritance was not possible in java. But from JDK 1.8 onwards, multiple inheritance is possible via use of interfaces with default methods."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-4-accessing-parent-class-members",children:"\ud83c\udfaf 4. Accessing Parent Class Members"}),"\n",(0,s.jsx)(n.h3,{id:"-41-constructors",children:"\ud83c\udf81 4.1 Constructors"}),"\n",(0,s.jsxs)(n.p,{children:["To call a parent class constructor, use ",(0,s.jsx)(n.code,{children:"super()"}),". Remember, it must be the ",(0,s.jsx)(n.strong,{children:"first statement"})," inside the child class constructor. \ud83d\udea8"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class Manager extends Employee {\n    public Manager() {\n        super(); // Must be first statement\n        // Other statements\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-42-fields",children:"\ud83d\udd0d 4.2 Fields"}),"\n",(0,s.jsx)(n.p,{children:"Non-private fields are inherited, but private fields? Nope! \u274c Use getters and setters instead."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Manager manager = new Manager(...);\nmanager.getId();\nmanager.getFirstName();\nmanager.getLastName();\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u26a0\ufe0f Be careful when both parent and child have fields with the same name!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Employee {\n    int rating = 100;\n}\nclass Manager extends Employee {\n    int rating = 200;\n}\nManager manager = new Manager();\nSystem.out.println(manager.rating);   // 200\nEmployee mgrEmployee = new Manager();\nSystem.out.println(mgrEmployee.rating);   // 100\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Why?"})," Because ",(0,s.jsx)(n.strong,{children:"fields are accessed based on reference type!"})," \ud83e\udde0"]}),"\n",(0,s.jsx)(n.h3,{id:"-43-methods",children:"\ud83c\udfac 4.3 Methods"}),"\n",(0,s.jsx)(n.p,{children:"Child classes can call non-private methods of the parent class."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class Manager extends Employee {\n    @Override\n    public String toString() {\n        return "Manager{" +\n            "id=" + getId() +\n            ", firstName=\'" + getFirstName() + "\'" +\n            ", lastName=\'" + getLastName() + "\'" +\n            "}\u201d;\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["But if both classes have a method with the same name? The method from the ",(0,s.jsx)(n.strong,{children:"actual instance type"})," is used. \ud83c\udfad"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Employee {\n    public int getRating() { return 100; }\n}\nclass Manager extends Employee {\n    public int getRating() { return 200; }\n}\nManager manager = new Manager();\nSystem.out.println(manager.getRating());   // 200\nEmployee mgrEmployee = new Manager();\nSystem.out.println(mgrEmployee.getRating());   // 200\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-5-conclusion",children:"\ud83c\udf89 5. Conclusion"}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udd39 Inheritance follows an IS-A relationship.\n\ud83d\udd39 Child classes inherit non-private members from the parent class.\n\ud83d\udd39 Java uses ",(0,s.jsx)(n.code,{children:"extends"})," for class inheritance and interfaces for multiple inheritance.\n\ud83d\udd39 Fields are accessed from the reference type, while methods are from the instance type."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Happy Coding!"})," \ud83c\udf88"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},3390:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>l});var i=a(6540);const s={},t=i.createContext(s);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);