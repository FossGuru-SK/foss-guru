"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[1795],{8203:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"kits/java/Misc Topics/java-versions-features/java-9/private-interface-methods","title":"Private Methods in Interface \u2013 Java 9","description":"Java 9 onward, you are allowed to include private methods in interfaces.","source":"@site/community/kits/java/Misc Topics/java-versions-features/java-9/private-interface-method.md","sourceDirName":"kits/java/Misc Topics/java-versions-features/java-9","slug":"/kits/java/Misc Topics/java-versions-features/java-9/private-interface-methods","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-9/private-interface-methods","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"private-interface-methods","title":"Private Methods in Interface \u2013 Java 9","description":"Java 9 onward, you are allowed to include private methods in interfaces.","sidebar_position":2},"sidebar":"community","previous":{"title":"Java Platform Module System","permalink":"/foss-guru/community/kits/java/Misc Topics/java-versions-features/java-9/java-platform-module-system"},"next":{"title":"Java 10","permalink":"/foss-guru/community/category/java-10"}}');var s=n(4848),i=n(8453);const r={id:"private-interface-methods",title:"Private Methods in Interface \u2013 Java 9",description:"Java 9 onward, you are allowed to include private methods in interfaces.",sidebar_position:2},o=void 0,c={},d=[{value:"Mastering Java 9 Private Methods in Interfaces (With a Fun Twist!)",id:"mastering-java-9-private-methods-in-interfaces-with-a-fun-twist",level:2},{value:"\ud83d\udcd6 Table of Contents",id:"-table-of-contents",level:2},{value:"\ud83d\udd70\ufe0f Interfaces Till Java 7 \u2013 The Old-School Way",id:"\ufe0f-interfaces-till-java-7--the-old-school-way",level:2},{value:"\ud83d\ude80 Java 8 \u2013 Static &amp; Default Methods Enter the Scene",id:"-java-8--static--default-methods-enter-the-scene",level:2},{value:"\ud83c\udfa9 Java 9 \u2013 Private Methods Join the Party",id:"-java-9--private-methods-join-the-party",level:2},{value:"Key Rules for Private Methods in Interfaces",id:"key-rules-for-private-methods-in-interfaces",level:3},{value:"\ud83c\udfd7\ufe0f Java 9 Private Interface Method Example \u2013 A Cool Calculator",id:"\ufe0f-java-9-private-interface-method-example--a-cool-calculator",level:2},{value:"<strong>CustomCalculator.java \u2013 Interface</strong>",id:"customcalculatorjava--interface",level:3},{value:"<strong>Main.java \u2013 Class</strong>",id:"mainjava--class",level:3},{value:"\ud83c\udfaf Summary \u2013 Java 9 Private Interface Methods At a Glance",id:"-summary--java-9-private-interface-methods-at-a-glance",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Banner java icon",src:n(4769).A+"",width:"370",height:"364"})}),"\n",(0,s.jsx)(t.h2,{id:"mastering-java-9-private-methods-in-interfaces-with-a-fun-twist",children:"Mastering Java 9 Private Methods in Interfaces (With a Fun Twist!)"}),"\n",(0,s.jsx)(t.p,{children:"Java 9 brought us an exciting upgrade\u2014private methods in interfaces! \ud83c\udf89 That\u2019s right, interfaces finally got a taste of encapsulation. This means cleaner, more maintainable code without cluttering implementing classes. Let's dive in and have some fun while learning!"}),"\n",(0,s.jsx)(t.h2,{id:"-table-of-contents",children:"\ud83d\udcd6 Table of Contents"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.strong,{children:"Interfaces till Java 7"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.strong,{children:"Static & Default Methods in Java 8"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.strong,{children:"Private Methods in Java 9"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.strong,{children:"Java 9 Private Interface Method Example"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.strong,{children:"Summary"})}),"\n"]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"\ufe0f-interfaces-till-java-7--the-old-school-way",children:"\ud83d\udd70\ufe0f Interfaces Till Java 7 \u2013 The Old-School Way"}),"\n",(0,s.jsx)(t.p,{children:"Back in the Java 7 days (and earlier), interfaces were like strict teachers\u2014only allowing public abstract methods. No fun, no flexibility! Implementing classes HAD to provide method definitions."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'public interface CustomInterface {\n    public abstract void method();\n}\n\npublic class CustomClass implements CustomInterface {\n    @Override\n    public void method() {\n        System.out.println("Hello World");\n    }\n\n    public static void main(String[] args){\n        CustomInterface instance = new CustomClass();\n        instance.method();\n    }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Output:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"Hello World\n"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"-java-8--static--default-methods-enter-the-scene",children:"\ud83d\ude80 Java 8 \u2013 Static & Default Methods Enter the Scene"}),"\n",(0,s.jsx)(t.p,{children:"Java 8 decided to shake things up! It allowed static and default methods inside interfaces. Finally, interfaces got some built-in functionality without forcing subclasses to implement everything!"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'public interface CustomInterface {\n    public abstract void method1();\n    \n    public default void method2() {\n        System.out.println("default method");\n    }\n    \n    public static void method3() {\n        System.out.println("static method");\n    }\n}\n\npublic class CustomClass implements CustomInterface {\n    @Override\n    public void method1() {\n        System.out.println("abstract method");\n    }\n    \n    public static void main(String[] args){\n        CustomInterface instance = new CustomClass();\n        instance.method1();\n        instance.method2();\n        CustomInterface.method3();\n    }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Output:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"abstract method\ndefault method\nstatic method\n"})}),"\n",(0,s.jsxs)(t.p,{children:["\ud83d\udcdd ",(0,s.jsx)(t.strong,{children:"Note:"})," The ",(0,s.jsx)(t.code,{children:"public"})," modifier is optional in interface methods, but we\u2019ve included it here for clarity."]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"-java-9--private-methods-join-the-party",children:"\ud83c\udfa9 Java 9 \u2013 Private Methods Join the Party"}),"\n",(0,s.jsxs)(t.p,{children:["With Java 9, interfaces got ",(0,s.jsx)(t.strong,{children:"private methods"}),"! This means better code reuse ",(0,s.jsx)(t.strong,{children:"inside"})," the interface without exposing those methods to implementing classes. It\u2019s like having secret superpowers! \ud83e\uddb8\u200d\u2642\ufe0f"]}),"\n",(0,s.jsx)(t.h3,{id:"key-rules-for-private-methods-in-interfaces",children:"Key Rules for Private Methods in Interfaces"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\ud83d\udeab ",(0,s.jsx)(t.strong,{children:"Private interface methods cannot be abstract"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["\ud83c\udfe0 ",(0,s.jsx)(t.strong,{children:"They can only be used inside the interface"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["\ud83d\udd04 ",(0,s.jsx)(t.strong,{children:"Private static methods can be used inside static and non-static interface methods"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["\u274c ",(0,s.jsx)(t.strong,{children:"Non-static private methods cannot be used inside private static methods"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'public interface CustomInterface {\n    public abstract void method1();\n    \n    public default void method2() {\n        method4();  // private method inside default method\n        method5();  // static method inside non-static method\n        System.out.println("default method");\n    }\n    \n    public static void method3() {\n        method5(); // static method inside another static method\n        System.out.println("static method");\n    }\n    \n    private void method4(){\n        System.out.println("private method");\n    }\n    \n    private static void method5(){\n        System.out.println("private static method");\n    }\n}\n\npublic class CustomClass implements CustomInterface {\n    @Override\n    public void method1() {\n        System.out.println("abstract method");\n    }\n    \n    public static void main(String[] args){\n        CustomInterface instance = new CustomClass();\n        instance.method1();\n        instance.method2();\n        CustomInterface.method3();\n    }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Output:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"abstract method\nprivate method\nprivate static method\ndefault method\nprivate static method\nstatic method\n"})}),"\n",(0,s.jsx)(t.p,{children:"\ud83c\udf89 See? Private methods keep things neat and tidy inside interfaces!"}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"\ufe0f-java-9-private-interface-method-example--a-cool-calculator",children:"\ud83c\udfd7\ufe0f Java 9 Private Interface Method Example \u2013 A Cool Calculator"}),"\n",(0,s.jsxs)(t.p,{children:["Let's see private methods in action! We\u2019ll build a ",(0,s.jsx)(t.strong,{children:"CustomCalculator"})," interface that adds ",(0,s.jsx)(t.strong,{children:"even and odd numbers"})," separately, using a private method to keep things DRY (Don\u2019t Repeat Yourself)."]}),"\n",(0,s.jsx)(t.h3,{id:"customcalculatorjava--interface",children:(0,s.jsx)(t.strong,{children:"CustomCalculator.java \u2013 Interface"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"import java.util.function.IntPredicate;\nimport java.util.stream.IntStream;\n\npublic interface CustomCalculator\n{\n    default int addEvenNumbers(int... nums) {\n        return add(n -> n % 2 == 0, nums);\n    }\n\n    default int addOddNumbers(int... nums) {\n        return add(n -> n % 2 != 0, nums);\n    }\n\n    private int add(IntPredicate predicate, int... nums) {\n        return IntStream.of(nums)\n                .filter(predicate)\n                .sum();\n    }\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"mainjava--class",children:(0,s.jsx)(t.strong,{children:"Main.java \u2013 Class"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"public class Main implements CustomCalculator {\n    public static void main(String[] args) {\n        CustomCalculator demo = new Main();\n         \n        int sumOfEvens = demo.addEvenNumbers(1,2,3,4,5,6,7,8,9);\n        System.out.println(sumOfEvens);\n         \n        int sumOfOdds = demo.addOddNumbers(1,2,3,4,5,6,7,8,9);\n        System.out.println(sumOfOdds);\n    }\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Output:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"20\n25\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Boom! \ud83d\udca5 Our private ",(0,s.jsx)(t.code,{children:"add"})," method makes sure we don\u2019t write the same filtering logic twice. Less code, more fun!"]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"-summary--java-9-private-interface-methods-at-a-glance",children:"\ud83c\udfaf Summary \u2013 Java 9 Private Interface Methods At a Glance"}),"\n",(0,s.jsxs)(t.p,{children:["Java 9 lets interfaces have ",(0,s.jsx)(t.strong,{children:"private"})," and ",(0,s.jsx)(t.strong,{children:"private static"})," methods to improve ",(0,s.jsx)(t.strong,{children:"code reuse"})," without exposing them to implementing classes. Here's a quick comparison of interface methods across versions:"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Method Type"}),(0,s.jsx)(t.th,{children:"Since When"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"public abstract"}),(0,s.jsx)(t.td,{children:"Java 7"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"public default"}),(0,s.jsx)(t.td,{children:"Java 8"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"public static"}),(0,s.jsx)(t.td,{children:"Java 8"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"private"}),(0,s.jsx)(t.td,{children:"Java 9"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"private static"}),(0,s.jsx)(t.td,{children:"Java 9"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Got questions? Drop them in the comments! \u270d\ufe0f"}),"\n",(0,s.jsx)(t.p,{children:"Happy Learning & Happy Coding! \ud83d\ude80"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Ref:"})," ",(0,s.jsx)(t.a,{href:"https://openjdk.org/jeps/213",children:"JEP 213"})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},4769:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(6540);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);