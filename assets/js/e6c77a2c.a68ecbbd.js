"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[2381],{2946:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"kits/java/Java OOP/building-blocks-of-oops/polymorphism","title":"Polymorphism in Java","description":"Polymorphism in Java is the ability to create member functions or fields that behaves differently in different programmatic contexts.","source":"@site/community/kits/java/Java OOP/building-blocks-of-oops/polymorphism.md","sourceDirName":"kits/java/Java OOP/building-blocks-of-oops","slug":"/kits/java/Java OOP/building-blocks-of-oops/polymorphism","permalink":"/foss-guru/community/kits/java/Java OOP/building-blocks-of-oops/polymorphism","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"polymorphism","title":"Polymorphism in Java","description":"Polymorphism in Java is the ability to create member functions or fields that behaves differently in different programmatic contexts.","sidebar_position":4},"sidebar":"community","previous":{"title":"Multiple Inheritance in Java","permalink":"/foss-guru/community/kits/java/Java OOP/building-blocks-of-oops/multiple-inheritance"},"next":{"title":"Encapsulation in Java","permalink":"/foss-guru/community/kits/java/Java OOP/building-blocks-of-oops/encapsulation"}}');var s=i(4848),a=i(8453);const t={id:"polymorphism",title:"Polymorphism in Java",description:"Polymorphism in Java is the ability to create member functions or fields that behaves differently in different programmatic contexts.",sidebar_position:4},l=void 0,r={},c=[{value:"\ud83c\udfad Polymorphism in Java - The Shape-Shifting Superpower",id:"-polymorphism-in-java---the-shape-shifting-superpower",level:2},{value:"\ud83e\udd14 What is Polymorphism?",id:"-what-is-polymorphism",level:2},{value:"\ud83d\udd00 Types of Polymorphism",id:"-types-of-polymorphism",level:2},{value:"\ud83c\udfd7\ufe0f 1. Compile-Time Polymorphism (Method Overloading)",id:"\ufe0f-1-compile-time-polymorphism-method-overloading",level:2},{value:"\u2728 How does it work?",id:"-how-does-it-work",level:3},{value:"\ud83d\udd22 Example: Calculator Class",id:"-example-calculator-class",level:3},{value:"\u23f3 2. Runtime Polymorphism (Method Overriding)",id:"-2-runtime-polymorphism-method-overriding",level:2},{value:"\ud83d\udc3e Example: Animal Kingdom \ud83d\udc36\ud83d\udc31",id:"-example-animal-kingdom-",level:3},{value:"\ud83d\udece\ufe0f Calling the Method",id:"\ufe0f-calling-the-method",level:3},{value:"\ud83c\udfaf Conclusion",id:"-conclusion",level:2}];function m(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Banner java icon",src:i(4769).A+"",width:"370",height:"364"})}),"\n",(0,s.jsx)(n.h2,{id:"-polymorphism-in-java---the-shape-shifting-superpower",children:"\ud83c\udfad Polymorphism in Java - The Shape-Shifting Superpower"}),"\n",(0,s.jsxs)(n.p,{children:["Polymorphism in Java is like a master of disguise\u2014it allows a class to behave differently in different contexts. It's one of the four pillars of ",(0,s.jsx)(n.a,{href:"/foss-guru/community/kits/java/Java%20OOP/building-blocks-of-oops/object-oriented-programming",children:"object-oriented programming (OOP)"}),", along with ",(0,s.jsx)(n.a,{href:"/foss-guru/community/kits/java/Java%20OOP/building-blocks-of-oops/inheritance",children:"inheritance"}),", ",(0,s.jsx)(n.a,{href:"/foss-guru/community/kits/java/Java%20OOP/building-blocks-of-oops/abstraction",children:"abstraction"}),", and ",(0,s.jsx)(n.a,{href:"/foss-guru/community/kits/java/Java%20OOP/building-blocks-of-oops/encapsulation",children:"encapsulation"}),". Think of it as an actor playing different roles in different movies! \ud83c\udfac"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-what-is-polymorphism",children:"\ud83e\udd14 What is Polymorphism?"}),"\n",(0,s.jsx)(n.p,{children:"Polymorphism lets a class act like a chameleon, adapting to different scenarios. Imagine a superhero who wears different costumes but still remains the same person inside! \ud83e\uddb8\u200d\u2642\ufe0f"}),"\n",(0,s.jsx)(n.p,{children:"In Java, we can relate polymorphism to one interface having multiple implementations. The contract remains the same, but each class implements it differently."}),"\n",(0,s.jsx)(n.p,{children:"For example, a reference variable of a superclass can refer to an instance of a subclass:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Object o = new Object(); // o can hold the reference of any subtype\n\nObject o = new String();\nObject o = new Integer();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here, ",(0,s.jsx)(n.code,{children:"String"})," and ",(0,s.jsx)(n.code,{children:"Integer"})," are subclasses of ",(0,s.jsx)(n.code,{children:"Object"}),'. It\'s like calling someone "Human" whether they are an athlete, a scientist, or a musician! \ud83c\udfb6\ud83c\udfc3\u200d\u2642\ufe0f\ud83d\udd2c']}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-types-of-polymorphism",children:"\ud83d\udd00 Types of Polymorphism"}),"\n",(0,s.jsx)(n.p,{children:"Java polymorphism comes in two flavors:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compile-time polymorphism"})," (a.k.a. method overloading, static binding)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Runtime polymorphism"})," (a.k.a. method overriding, dynamic binding)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"These types are specific to Java, though polymorphism exists in many forms across different programming languages."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-1-compile-time-polymorphism-method-overloading",children:"\ud83c\udfd7\ufe0f 1. Compile-Time Polymorphism (Method Overloading)"}),"\n",(0,s.jsxs)(n.p,{children:["As the name suggests, in compile-time polymorphism, the method to be executed is determined at ",(0,s.jsx)(n.strong,{children:"compile time"}),". It is achieved using method overloading."]}),"\n",(0,s.jsx)(n.h3,{id:"-how-does-it-work",children:"\u2728 How does it work?"}),"\n",(0,s.jsx)(n.p,{children:"An object can have multiple methods with the same name, but different:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Number of parameters"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Parameter types"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-example-calculator-class",children:"\ud83d\udd22 Example: Calculator Class"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class Calculator {\n\n  public Integer sum(Integer a, Integer b) {\n    return a + b;\n  }\n\n  public Float sum(Float a, Float b) {\n    return a + b;\n  }\n\n  public Double sum(Double a, Double b) {\n    return a + b;\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now, when we invoke ",(0,s.jsx)(n.code,{children:"sum()"}),", the compiler decides which method to call based on argument types. It's like a waiter knowing whether you want coffee \u2615 or tea \ud83c\udf75 based on your order!"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Calculator calc = new Calculator();\nInteger sum1 = calc.sum(1 ,2);\nFloat sum2 = calc.sum(1f ,2f);\nDouble sum3 = calc.sum(1d ,2d);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-2-runtime-polymorphism-method-overriding",children:"\u23f3 2. Runtime Polymorphism (Method Overriding)"}),"\n",(0,s.jsxs)(n.p,{children:["Runtime polymorphism is all about ",(0,s.jsx)(n.strong,{children:"method overriding"}),". The method that gets executed is determined ",(0,s.jsx)(n.strong,{children:"at runtime"}),", based on the actual instance of the object."]}),"\n",(0,s.jsx)(n.h3,{id:"-example-animal-kingdom-",children:"\ud83d\udc3e Example: Animal Kingdom \ud83d\udc36\ud83d\udc31"}),"\n",(0,s.jsxs)(n.p,{children:["Think of an ",(0,s.jsx)(n.code,{children:"Animal"})," class with a ",(0,s.jsx)(n.code,{children:"makeNoise()"})," method. Dogs \ud83d\udc15 bark, cats \ud83d\udc08 meow, but both are still animals!"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'class Animal {\n  public void makeNoise() {\n    System.out.println("Some sound");\n  }\n}\n\nclass Dog extends Animal {\n  public void makeNoise() {\n    System.out.println("Bark");\n  }\n}\n\nclass Cat extends Animal {\n  public void makeNoise() {\n    System.out.println("Meow");\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-calling-the-method",children:"\ud83d\udece\ufe0f Calling the Method"}),"\n",(0,s.jsx)(n.p,{children:"At runtime, Java decides which method to invoke based on the actual instance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'Animal cat = new Cat();\ncat.makeNoise(); // Prints "Meow"\n\nAnimal dog = new Dog();\ndog.makeNoise(); // Prints "Bark"\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is like a remote control! \ud83c\udfae The button is the same, but whether you control a toy car \ud83d\ude97 or a drone \ud83d\ude81 depends on the actual object!"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-conclusion",children:"\ud83c\udfaf Conclusion"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Polymorphism allows objects, methods, and variables to take ",(0,s.jsx)(n.strong,{children:"multiple forms"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Java supports ",(0,s.jsx)(n.strong,{children:"method overloading (compile-time)"})," and ",(0,s.jsx)(n.strong,{children:"method overriding (runtime)"})," polymorphism."]}),"\n",(0,s.jsxs)(n.li,{children:["Operator overloading exists in Java ",(0,s.jsxs)(n.strong,{children:["only for the ",(0,s.jsx)(n.code,{children:"+"})," operator"]})," (e.g., adding numbers vs. concatenating strings)."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Polymorphism makes Java ",(0,s.jsx)(n.strong,{children:"flexible, scalable, and powerful"}),"\u2014just like a superhero with multiple disguises! \ud83e\uddb8\u200d\u2640\ufe0f\ud83d\udcaa"]}),"\n",(0,s.jsx)(n.p,{children:"Happy Coding! \ud83d\ude80\ud83d\ude03"})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},4769:(e,n,i)=>{i.d(n,{A:()=>o});const o=i.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var o=i(6540);const s={},a=o.createContext(s);function t(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);