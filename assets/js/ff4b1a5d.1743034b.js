"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[8076],{5274:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"kits/java/Java Language Basics/operators","title":"Java Operators","description":"Java Language Operators","source":"@site/community/kits/java/Java Language Basics/operators.md","sourceDirName":"kits/java/Java Language Basics","slug":"/kits/java/Java Language Basics/operators","permalink":"/foss-guru/community/kits/java/Java Language Basics/operators","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"id":"operators","title":"Java Operators","description":"Java Language Operators","sidebar_position":10},"sidebar":"community","previous":{"title":"Java ClassPath","permalink":"/foss-guru/community/kits/java/Java Language Basics/classpath"},"next":{"title":"Java Variables","permalink":"/foss-guru/community/kits/java/Java Language Basics/variables"}}');var i=s(4848),t=s(8453);const d={id:"operators",title:"Java Operators",description:"Java Language Operators",sidebar_position:10},a=void 0,l={},c=[{value:"\ud83e\udd16 Java Operators \u2013 The Ultimate Guide (With a Dash of Fun!)",id:"-java-operators--the-ultimate-guide-with-a-dash-of-fun",level:2},{value:"\ud83c\udfad Welcome to the Wild World of Java Operators",id:"-welcome-to-the-wild-world-of-java-operators",level:2},{value:"\ud83c\udfaf 1. What Are Java Operators?",id:"-1-what-are-java-operators",level:2},{value:"\ud83d\udd8a\ufe0f 2. Assignment Operator (<code>=</code>)",id:"\ufe0f-2-assignment-operator-",level:2},{value:"\ud83d\udd22 3. Arithmetic Operators \u2013 Math, but Fun! \ud83d\ude0e",id:"-3-arithmetic-operators--math-but-fun-",level:2},{value:"3.1 Unary Arithmetic Operators",id:"31-unary-arithmetic-operators",level:3},{value:"3.2 Binary Arithmetic Operators",id:"32-binary-arithmetic-operators",level:3},{value:"\ud83e\uddf5 4. The Magical String Concatenation Operator (<code>+</code>)",id:"-4-the-magical-string-concatenation-operator-",level:2},{value:"\ud83e\udd14 5. Relational Operators \u2013 Java\u2019s Truth Seekers",id:"-5-relational-operators--javas-truth-seekers",level:2},{value:"\ud83e\udd2f 6. Logical Operators \u2013 The Brains Behind Decisions",id:"-6-logical-operators--the-brains-behind-decisions",level:2},{value:"\u26a1 7. Bitwise Operators \u2013 Java\u2019s Electricians \ud83d\udd0c",id:"-7-bitwise-operators--javas-electricians-",level:2},{value:"\u2753 8. The Ternary Operator \u2013 Java\u2019s Mini If-Else",id:"-8-the-ternary-operator--javas-mini-if-else",level:2},{value:"\ud83c\udfc6 9. Operator Precedence \u2013 Who Wins?",id:"-9-operator-precedence--who-wins",level:2},{value:"Operator Precedence Table (Top = Highest Priority)",id:"operator-precedence-table-top--highest-priority",level:3},{value:"\ud83c\udf89 Conclusion",id:"-conclusion",level:2}];function o(e){const r={code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"Banner java icon",src:s(3390).A+"",width:"370",height:"364"})}),"\n",(0,i.jsx)(r.h2,{id:"-java-operators--the-ultimate-guide-with-a-dash-of-fun",children:"\ud83e\udd16 Java Operators \u2013 The Ultimate Guide (With a Dash of Fun!)"}),"\n",(0,i.jsx)(r.h2,{id:"-welcome-to-the-wild-world-of-java-operators",children:"\ud83c\udfad Welcome to the Wild World of Java Operators"}),"\n",(0,i.jsx)(r.p,{children:"Hey there, Java explorer! \ud83d\ude80 Get ready to dive into the thrilling universe of Java operators, where tiny symbols wield immense power. We'll unravel the mysteries of precedence, understand when to use which operator, and, of course, have some fun while doing it! \ud83d\udca1\ud83d\udca5"}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"-1-what-are-java-operators",children:"\ud83c\udfaf 1. What Are Java Operators?"}),"\n",(0,i.jsx)(r.p,{children:"Think of operators as the action heroes of Java \u2013 they take one, two, or three operands and perform operations to save the day. \ud83e\uddb8\u200d\u2642\ufe0f"}),"\n",(0,i.jsx)(r.p,{children:"Operators can be classified into two major types:"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Based on the number of operands:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Unary Operators"}),": Work with just one operand (e.g., ",(0,i.jsx)(r.code,{children:"++"}),", ",(0,i.jsx)(r.code,{children:"--"}),")"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Binary Operators"}),": Need two operands to function (e.g., ",(0,i.jsx)(r.code,{children:"+"}),", ",(0,i.jsx)(r.code,{children:"-"}),", ",(0,i.jsx)(r.code,{children:"*"}),")"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Ternary Operators"}),": The rarest kind, require three operands (e.g., ",(0,i.jsx)(r.code,{children:"?:"}),")"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Based on what they do:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Arithmetic Operators \u2795\u2796\u2716\ufe0f\u2797"}),"\n",(0,i.jsx)(r.li,{children:"Relational Operators \ud83e\udd14"}),"\n",(0,i.jsx)(r.li,{children:"Logical Operators \ud83e\udde0"}),"\n",(0,i.jsx)(r.li,{children:"Bitwise Operators \ud83d\udd22"}),"\n",(0,i.jsx)(r.li,{children:"Assignment Operators \ud83d\udccc"}),"\n",(0,i.jsx)(r.li,{children:"And many more!"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.h2,{id:"\ufe0f-2-assignment-operator-",children:["\ud83d\udd8a\ufe0f 2. Assignment Operator (",(0,i.jsx)(r.code,{children:"="}),")"]}),"\n",(0,i.jsx)(r.p,{children:"This humble yet mighty operator is responsible for assigning values to variables. Think of it as a delivery person handing over packages. \ud83d\udce6"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"int counter = 26; // counter gets the value 26\n"})}),"\n",(0,i.jsx)(r.p,{children:"Java ensures that the data types match, or else you get a compile-time error."}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"-3-arithmetic-operators--math-but-fun-",children:"\ud83d\udd22 3. Arithmetic Operators \u2013 Math, but Fun! \ud83d\ude0e"}),"\n",(0,i.jsx)(r.p,{children:"These operators make math look cool. \ud83d\ude0e They include:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"int sum = 10 + 20;  // 30\nint difference = 50 - 20; // 30\nlong area = 20L * 30L;  // 600\nint percentage = 20 / 100; // 0 (Oops, integer division!)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"31-unary-arithmetic-operators",children:"3.1 Unary Arithmetic Operators"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Operator"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"+"})}),(0,i.jsx)(r.td,{children:"Unary plus (keeps numbers positive)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"-"})}),(0,i.jsx)(r.td,{children:"Unary minus (flips sign)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"++"})}),(0,i.jsx)(r.td,{children:"Increments value by 1"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"--"})}),(0,i.jsx)(r.td,{children:"Decrements value by 1"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"!"})}),(0,i.jsx)(r.td,{children:"Logical NOT (flips boolean values)"})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"32-binary-arithmetic-operators",children:"3.2 Binary Arithmetic Operators"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Operator"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"+"})}),(0,i.jsx)(r.td,{children:"Addition"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"-"})}),(0,i.jsx)(r.td,{children:"Subtraction"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"*"})}),(0,i.jsx)(r.td,{children:"Multiplication"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"/"})}),(0,i.jsx)(r.td,{children:"Division"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"%"})}),(0,i.jsx)(r.td,{children:"Modulus (remainder)"})]})]})]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.h2,{id:"-4-the-magical-string-concatenation-operator-",children:["\ud83e\uddf5 4. The Magical String Concatenation Operator (",(0,i.jsx)(r.code,{children:"+"}),")"]}),"\n",(0,i.jsxs)(r.p,{children:["Java\u2019s ",(0,i.jsx)(r.code,{children:"+"})," operator moonlights as a ",(0,i.jsx)(r.strong,{children:"string joiner"})," when used with text! \ud83c\udf1f"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'String greeting = "Hello" + " World!"; // "Hello World!"\n'})}),"\n",(0,i.jsx)(r.p,{children:"Even numbers can get in on the fun:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'String result = 26 + " Days Later"; // "26 Days Later"\n'})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Fun Fact:"})," If you concatenate ",(0,i.jsx)(r.code,{children:"null"}),', it literally prints "null"! \ud83d\ude31']}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'String spooky = "I am " + null; // "I am null"\n'})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"-5-relational-operators--javas-truth-seekers",children:"\ud83e\udd14 5. Relational Operators \u2013 Java\u2019s Truth Seekers"}),"\n",(0,i.jsxs)(r.p,{children:["These operators compare two values and return a ",(0,i.jsx)(r.strong,{children:"boolean"})," result (",(0,i.jsx)(r.code,{children:"true"})," or ",(0,i.jsx)(r.code,{children:"false"}),")."]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Operator"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"=="})}),(0,i.jsx)(r.td,{children:"Equals to"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"!="})}),(0,i.jsx)(r.td,{children:"Not equals to"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:">"})}),(0,i.jsx)(r.td,{children:"Greater than"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<"})}),(0,i.jsx)(r.td,{children:"Less than"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:">="})}),(0,i.jsx)(r.td,{children:"Greater than or equals"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<="})}),(0,i.jsx)(r.td,{children:"Less than or equals"})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Example:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"boolean isEqual = (10 == 20); // false\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"-6-logical-operators--the-brains-behind-decisions",children:"\ud83e\udd2f 6. Logical Operators \u2013 The Brains Behind Decisions"}),"\n",(0,i.jsx)(r.p,{children:"These are like the bouncers of Java\u2019s control statements, making sure conditions behave properly."}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Operator"}),(0,i.jsx)(r.th,{children:"Description"}),(0,i.jsx)(r.th,{}),(0,i.jsx)(r.th,{})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"!"})}),(0,i.jsx)(r.td,{children:"NOT (inverts true/false)"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"&&"})}),(0,i.jsx)(r.td,{children:"AND (both conditions must be true)"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"`"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"`"}),(0,i.jsx)(r.td,{children:"OR (at least one must be true)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"^"})}),(0,i.jsx)(r.td,{children:"XOR (true if only one condition is true)"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Example:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'if (result > 10 && result < 30) {\n    System.out.println("Within range!");\n}\n'})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"-7-bitwise-operators--javas-electricians-",children:"\u26a1 7. Bitwise Operators \u2013 Java\u2019s Electricians \ud83d\udd0c"}),"\n",(0,i.jsxs)(r.p,{children:["Bitwise operators work at the ",(0,i.jsx)(r.strong,{children:"bit level"}),". (Because who doesn\u2019t love binary?)"]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Operator"}),(0,i.jsx)(r.th,{children:"Description"}),(0,i.jsx)(r.th,{})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"&"})}),(0,i.jsx)(r.td,{children:"AND"}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"`"}),(0,i.jsx)(r.td,{children:"`"}),(0,i.jsx)(r.td,{children:"OR"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"^"})}),(0,i.jsx)(r.td,{children:"XOR"}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"~"})}),(0,i.jsx)(r.td,{children:"NOT (flip all bits)"}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<<"})}),(0,i.jsx)(r.td,{children:"Left shift"}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:">>"})}),(0,i.jsx)(r.td,{children:"Right shift"}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:">>>"})}),(0,i.jsx)(r.td,{children:"Zero-fill right shift"}),(0,i.jsx)(r.td,{})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Example:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"int bitwiseResult = 5 & 3; // 0101 & 0011 = 0001 (1 in decimal)\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"-8-the-ternary-operator--javas-mini-if-else",children:"\u2753 8. The Ternary Operator \u2013 Java\u2019s Mini If-Else"}),"\n",(0,i.jsx)(r.p,{children:"Short, sweet, and saves lines of code! \u2728"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"int biggerNumber = (number1 > number2) ? number1 : number2;\n"})}),"\n",(0,i.jsx)(r.p,{children:"It\u2019s basically:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"If condition is true \u2192 Return first value\nElse \u2192 Return second value\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"-9-operator-precedence--who-wins",children:"\ud83c\udfc6 9. Operator Precedence \u2013 Who Wins?"}),"\n",(0,i.jsxs)(r.p,{children:["Java follows a ",(0,i.jsx)(r.strong,{children:"strict hierarchy"})," when evaluating expressions. Parentheses ",(0,i.jsx)(r.code,{children:"()"})," can override these rules."]}),"\n",(0,i.jsx)(r.p,{children:"For example:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"int result = 1 + 2 * 3; // 1 + (2 * 3) = 7\n"})}),"\n",(0,i.jsx)(r.p,{children:"But with parentheses:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"int result = (1 + 2) * 3; // (3 * 3) = 9\n"})}),"\n",(0,i.jsx)(r.h3,{id:"operator-precedence-table-top--highest-priority",children:"Operator Precedence Table (Top = Highest Priority)"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Precedence"}),(0,i.jsx)(r.th,{children:"Operators"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"15"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"()"}),", ",(0,i.jsx)(r.code,{children:"[]"}),", ",(0,i.jsx)(r.code,{children:"."})," (Member selection)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"14"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"++"}),", ",(0,i.jsx)(r.code,{children:"--"})," (Postfix)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"13"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"++"}),", ",(0,i.jsx)(r.code,{children:"--"}),", ",(0,i.jsx)(r.code,{children:"+"}),", ",(0,i.jsx)(r.code,{children:"-"}),", ",(0,i.jsx)(r.code,{children:"!"}),", ",(0,i.jsx)(r.code,{children:"~"})," (Unary)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"12"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"*"}),", ",(0,i.jsx)(r.code,{children:"/"}),", ",(0,i.jsx)(r.code,{children:"%"})," (Multiplication, division, modulus)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"11"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"+"}),", ",(0,i.jsx)(r.code,{children:"-"})," (Addition, subtraction)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"..."}),(0,i.jsx)(r.td,{children:"..."})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Use this wisely to avoid surprises! \ud83c\udfad"}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"-conclusion",children:"\ud83c\udf89 Conclusion"}),"\n",(0,i.jsxs)(r.p,{children:["Congratulations, Java warrior! \ud83c\udfc6 You\u2019ve mastered Java operators! Now go forth, write cleaner code, and show off your new knowledge. Remember, ",(0,i.jsxs)(r.strong,{children:["with great power (",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"++"})})}),", ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"--"})})}),") comes great responsibility!"]})," \ud83d\udcaa"]}),"\n",(0,i.jsx)(r.p,{children:"Happy coding! \ud83d\ude80"})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},3390:(e,r,s)=>{s.d(r,{A:()=>n});const n=s.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,r,s)=>{s.d(r,{R:()=>d,x:()=>a});var n=s(6540);const i={},t=n.createContext(i);function d(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);