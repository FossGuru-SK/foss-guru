"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[1312],{444:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"kits/java/Java Language Basics/immutable-class","title":"Immutable Classes in Java","description":"Learn about immutable objects, records and collections in Java and create a Java class immutable step by step with examples.","source":"@site/community/kits/java/Java Language Basics/immutable-class.md","sourceDirName":"kits/java/Java Language Basics","slug":"/kits/java/Java Language Basics/immutable-class","permalink":"/foss-guru/community/kits/java/Java Language Basics/immutable-class","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":17,"frontMatter":{"id":"immutable-class","title":"Immutable Classes in Java","description":"Learn about immutable objects, records and collections in Java and create a Java class immutable step by step with examples.","sidebar_position":17},"sidebar":"community","previous":{"title":"Java Pass-by-Value-or-by-Reference","permalink":"/foss-guru/community/kits/java/Java Language Basics/pass-by-reference-value"},"next":{"title":"Flow Control Statements","permalink":"/foss-guru/community/category/flow-control-statements"}}');var t=a(4848),i=a(8453);const r={id:"immutable-class",title:"Immutable Classes in Java",description:"Learn about immutable objects, records and collections in Java and create a Java class immutable step by step with examples.",sidebar_position:17},o=void 0,l={},c=[{value:"\ud83d\ude80 The Fun Guide to Java Immutability \ud83c\udf89",id:"-the-fun-guide-to-java-immutability-",level:2},{value:"\ud83d\udd25 What is Immutability?",id:"-what-is-immutability",level:2},{value:"\ud83d\uddc2\ufe0f Immutability in Collections",id:"\ufe0f-immutability-in-collections",level:2},{value:"\ud83c\udfa8 How to Create an Immutable Class",id:"-how-to-create-an-immutable-class",level:2},{value:"\u26a1 Immutability with Java Records",id:"-immutability-with-java-records",level:2},{value:"\ud83d\udcda Immutable Classes in JDK",id:"-immutable-classes-in-jdk",level:2},{value:"\ud83c\udfaf Why Should You Care?",id:"-why-should-you-care",level:2},{value:"\u2705 Predictability",id:"-predictability",level:3},{value:"\u2705 Thread-Safety",id:"-thread-safety",level:3},{value:"\u2705 No More Copying!",id:"-no-more-copying",level:3},{value:"\u2705 Better Performance \ud83d\ude80",id:"-better-performance-",level:3},{value:"\ud83c\udfac Conclusion",id:"-conclusion",level:2},{value:"<strong>Pro Tip:</strong> Always aim to make your Java classes immutable. It saves you from a ton of headaches down the road! \ud83d\ude03",id:"pro-tip-always-aim-to-make-your-java-classes-immutable-it-saves-you-from-a-ton-of-headaches-down-the-road-",level:3}];function d(e){const n={br:"br",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Banner java icon",src:a(4769).A+"",width:"370",height:"364"})}),"\n",(0,t.jsx)(n.h2,{id:"-the-fun-guide-to-java-immutability-",children:"\ud83d\ude80 The Fun Guide to Java Immutability \ud83c\udf89"}),"\n",(0,t.jsx)(n.h2,{id:"-what-is-immutability",children:"\ud83d\udd25 What is Immutability?"}),"\n",(0,t.jsxs)(n.p,{children:["Imagine having a magical box \ud83e\uddd9\u200d\u2642\ufe0f that, once sealed, never lets you change what\u2019s inside. That\u2019s what an ",(0,t.jsx)(n.strong,{children:"immutable object"})," is in Java\u2014once created, it stays the same forever! \u2744\ufe0f Any modifications? Nope! You\u2019ll have to create a brand-new object instead."]}),"\n",(0,t.jsxs)(n.p,{children:["Let\u2019s see an example with the legendary ",(0,t.jsx)(n.code,{children:"String"})," class:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'String string = "test";\nString newString = string.toLowerCase();  // Creates a new String\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:"string"})," remains untouched, while ",(0,t.jsx)(n.code,{children:"newString"})," holds the modified value. Java is all about playing it safe! \ud83d\ude0e"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-immutability-in-collections",children:"\ud83d\uddc2\ufe0f Immutability in Collections"}),"\n",(0,t.jsx)(n.p,{children:"Java gives us three cool ways to create immutable collections:"}),"\n",(0,t.jsxs)(n.p,{children:["1\ufe0f\u20e3 ",(0,t.jsx)(n.strong,{children:"Unmodifiable collections"}),(0,t.jsx)(n.br,{}),"\n","2\ufe0f\u20e3 ",(0,t.jsx)(n.strong,{children:"Immutable factory methods (Java 9+)"}),(0,t.jsx)(n.br,{}),"\n","3\ufe0f\u20e3 ",(0,t.jsx)(n.strong,{children:"Immutable copies (Java 10+)"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Collections.unmodifiableList(recordList);  // Unmodifiable list\nList.of(new Record(1, "test"));  // Factory methods in Java 9\nList.copyOf(recordList);  // Java 10\n'})}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udea8 ",(0,t.jsx)(n.strong,{children:"Warning:"}),' These are only "shallowly immutable." You can\u2019t add or remove elements, but the existing elements inside can still mutate. \ud83d\ude31']}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'List<Record> list = List.of(new Record(1, "value"));\nSystem.out.println(list); // [Record(id=1, name=value)]\n\nlist.get(0).setName("modified-value");\nSystem.out.println(list); // [Record(id=1, name=modified-value)]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["To achieve ",(0,t.jsx)(n.strong,{children:"true immutability"}),", only add immutable objects to the collection. This ensures that even if someone gets a reference to an element, they ",(0,t.jsx)(n.strong,{children:"CAN\u2019T"})," modify it. \ud83d\ude80"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-how-to-create-an-immutable-class",children:"\ud83c\udfa8 How to Create an Immutable Class"}),"\n",(0,t.jsxs)(n.p,{children:["Java suggests the following to craft a bulletproof ",(0,t.jsx)(n.strong,{children:"immutable class"}),":"]}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"No setter methods!"})," Setters allow change, which we don\u2019t want. \u274c\n\u2705 ",(0,t.jsxs)(n.strong,{children:["Make fields ",(0,t.jsx)(n.code,{children:"final"})," and ",(0,t.jsx)(n.code,{children:"private"}),"."]})," Once set, never modified. \ud83d\udd10\n\u2705 ",(0,t.jsx)(n.strong,{children:"Prevent method overriding."})," Just make the class ",(0,t.jsx)(n.code,{children:"final"}),". \ud83c\udfad\n\u2705 ",(0,t.jsx)(n.strong,{children:"Handle mutable fields cautiously!"})," If an object has a list, return a new copy instead of the original."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'final class Record {\n  private final long id;\n  private final String name;\n  private final List<String> tokens;\n\n  public Record(long id, String name, List<String> tokens) {\n    this.id = id;\n    this.name = name;\n    this.tokens = List.copyOf(tokens);\n  }\n\n  public long getId() { return id; }\n  public String getName() { return name; }\n  public List<String> getTokens() { return tokens; }\n\n  @Override\n  public String toString() {\n    return "Record{" +\n        "id=" + id +\n        ", name=\'" + name + \'\\\'\' +\n        ", tokens=" + tokens +\n        \'}\';\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Let\u2019s try modifying it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'List<String> tokens = new ArrayList<>();\ntokens.add("active");\n\nRecord record = new Record(1, "value", tokens);\nSystem.out.println(record);   // Record{id=1, name=\'value\', tokens=[active]}\n\nrecord.getTokens().add("new token"); \nSystem.out.println(record);   // Record{id=1, name=\'value\', tokens=[active]}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"BOOM! \ud83d\udd25 The original object remains unchanged!"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-immutability-with-java-records",children:"\u26a1 Immutability with Java Records"}),"\n",(0,t.jsxs)(n.p,{children:["Java ",(0,t.jsx)(n.strong,{children:"records"})," (introduced in Java 14) remove boilerplate code while making objects immutable. \ud83c\udf89"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"record Record(long id, String name, List<String> tokens){\n  public List<String> tokens() {\n    return List.copyOf(tokens);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Testing immutability:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'List<String> tokens = new ArrayList<>();\ntokens.add("active");\n\nRecord record = new Record(1, "value", tokens);\nSystem.out.println(record);   // Record{id=1, name=\'value\', tokens=[active]}\n\nrecord.tokens().add("new token");\nSystem.out.println(record);   // Record{id=1, name=\'value\', tokens=[active]}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Records enforce ",(0,t.jsx)(n.strong,{children:"immutability"})," with ",(0,t.jsx)(n.strong,{children:"less code!"})," \ud83c\udfc6"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-immutable-classes-in-jdk",children:"\ud83d\udcda Immutable Classes in JDK"}),"\n",(0,t.jsxs)(n.p,{children:["Java already has a ton of built-in ",(0,t.jsx)(n.strong,{children:"immutable"})," classes:"]}),"\n",(0,t.jsxs)(n.p,{children:["\u2714 ",(0,t.jsx)(n.code,{children:"java.lang.String"}),(0,t.jsx)(n.br,{}),"\n","\u2714 Wrapper classes (",(0,t.jsx)(n.code,{children:"Integer"}),", ",(0,t.jsx)(n.code,{children:"Long"}),", ",(0,t.jsx)(n.code,{children:"Double"}),", etc.)",(0,t.jsx)(n.br,{}),"\n","\u2714 ",(0,t.jsx)(n.code,{children:"java.math.BigInteger"})," and ",(0,t.jsx)(n.code,{children:"BigDecimal"}),(0,t.jsx)(n.br,{}),"\n","\u2714 Unmodifiable collections (",(0,t.jsx)(n.code,{children:"Collections.singletonMap()"}),")",(0,t.jsx)(n.br,{}),"\n","\u2714 ",(0,t.jsx)(n.code,{children:"java.util.UUID"}),(0,t.jsx)(n.br,{}),"\n","\u2714 Java Enums \ud83d\udd25",(0,t.jsx)(n.br,{}),"\n","\u2714 Java 8 Date/Time API (",(0,t.jsx)(n.code,{children:"LocalDate"}),", ",(0,t.jsx)(n.code,{children:"LocalTime"}),")",(0,t.jsx)(n.br,{}),"\n","\u2714 ",(0,t.jsx)(n.strong,{children:"Record types"})," \ud83c\udfaf"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-why-should-you-care",children:"\ud83c\udfaf Why Should You Care?"}),"\n",(0,t.jsx)(n.h3,{id:"-predictability",children:"\u2705 Predictability"}),"\n",(0,t.jsxs)(n.p,{children:["Immutable objects ",(0,t.jsx)(n.strong,{children:"never change"}),", making debugging much easier! \ud83e\uddd0"]}),"\n",(0,t.jsx)(n.h3,{id:"-thread-safety",children:"\u2705 Thread-Safety"}),"\n",(0,t.jsxs)(n.p,{children:["Since nothing changes, no race conditions or synchronization nightmares. ",(0,t.jsx)(n.strong,{children:"Win!"})," \ud83c\udfc6"]}),"\n",(0,t.jsx)(n.h3,{id:"-no-more-copying",children:"\u2705 No More Copying!"}),"\n",(0,t.jsxs)(n.p,{children:["Immutable objects don\u2019t need a ",(0,t.jsx)(n.strong,{children:"copy constructor"})," or ",(0,t.jsx)(n.strong,{children:"clone()"}),". Java just reuses them. \ud83d\udd04"]}),"\n",(0,t.jsx)(n.h3,{id:"-better-performance-",children:"\u2705 Better Performance \ud83d\ude80"}),"\n",(0,t.jsx)(n.p,{children:"Caching? Check! Memoization? Check! Immutable objects are perfect for optimization."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-conclusion",children:"\ud83c\udfac Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"Immutable classes in Java:"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Are simple to construct, test, and use"}),(0,t.jsx)(n.br,{}),"\n","\u2705 ",(0,t.jsx)(n.strong,{children:"Eliminate synchronization issues"}),(0,t.jsx)(n.br,{}),"\n","\u2705 ",(0,t.jsx)(n.strong,{children:"Make great Map keys and Set elements"}),(0,t.jsx)(n.br,{}),"\n","\u2705 ",(0,t.jsx)(n.strong,{children:"Ensure \u2018failure atomicity\u2019"})," (If an error occurs, objects are never left in a bad state)"]}),"\n",(0,t.jsxs)(n.h3,{id:"pro-tip-always-aim-to-make-your-java-classes-immutable-it-saves-you-from-a-ton-of-headaches-down-the-road-",children:[(0,t.jsx)(n.strong,{children:"Pro Tip:"})," Always aim to make your Java classes immutable. It saves you from a ton of headaches down the road! \ud83d\ude03"]}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\ude80 ",(0,t.jsx)(n.strong,{children:"Happy Coding!"})," \ud83d\ude80"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},4769:(e,n,a)=>{a.d(n,{A:()=>s});const s=a.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var s=a(6540);const t={},i=s.createContext(t);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);