"use strict";(self.webpackChunkfoss_guru=self.webpackChunkfoss_guru||[]).push([[3494],{9774:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"kits/java/Java Language Basics/statement","title":"Java Statement","description":"Java Language Statement","source":"@site/community/kits/java/Java Language Basics/statement.md","sourceDirName":"kits/java/Java Language Basics","slug":"/kits/java/Java Language Basics/statement","permalink":"/foss-guru/community/kits/java/Java Language Basics/statement","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"id":"statement","title":"Java Statement","description":"Java Language Statement","sidebar_position":15},"sidebar":"community","previous":{"title":"Java Comments","permalink":"/foss-guru/community/kits/java/Java Language Basics/comments"},"next":{"title":"Java Pass-by-Value-or-by-Reference","permalink":"/foss-guru/community/kits/java/Java Language Basics/pass-by-reference-value"}}');var a=t(4848),i=t(8453);const o={id:"statement",title:"Java Statement",description:"Java Language Statement",sidebar_position:15},c=void 0,l={},r=[{value:"\ud83c\udfd7\ufe0f Java Block Statements \u2013 Now with Extra Fun! \ud83c\udf89",id:"\ufe0f-java-block-statements--now-with-extra-fun-",level:2},{value:"\ud83e\udd14 What is a Block Statement?",id:"-what-is-a-block-statement",level:2},{value:"\ud83d\udccc Example",id:"-example",level:3},{value:"\ud83d\udd0d Scope of Variables Inside Blocks \ud83d\udd75\ufe0f",id:"-scope-of-variables-inside-blocks-\ufe0f",level:2},{value:"\u274c Example of Scope Violation \ud83d\udeab",id:"-example-of-scope-violation-",level:3},{value:"\ud83c\udfd7\ufe0f Nested Blocks",id:"\ufe0f-nested-blocks",level:3},{value:"\ud83d\ude80 Blocks During Object Creation",id:"-blocks-during-object-creation",level:2},{value:"\ud83d\udd25 Non-Static vs Static Blocks",id:"-non-static-vs-static-blocks",level:3},{value:"Example",id:"example",level:3},{value:"\ud83d\udca1 What Happens When You Run This?",id:"-what-happens-when-you-run-this",level:3},{value:"\ud83c\udfaf The Takeaway",id:"-the-takeaway",level:2}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Banner java icon",src:t(4769).A+"",width:"370",height:"364"})}),"\n",(0,a.jsx)(n.h2,{id:"\ufe0f-java-block-statements--now-with-extra-fun-",children:"\ud83c\udfd7\ufe0f Java Block Statements \u2013 Now with Extra Fun! \ud83c\udf89"}),"\n",(0,a.jsx)(n.h2,{id:"-what-is-a-block-statement",children:"\ud83e\udd14 What is a Block Statement?"}),"\n",(0,a.jsxs)(n.p,{children:["Imagine you have a to-do list. You can complete each task one by one, or you can group similar tasks together (like \u201cgroceries\u201d or \u201cwork stuff\u201d). Java does something similar with ",(0,a.jsx)(n.strong,{children:"block statements"}),"! \ud83c\udfd7\ufe0f"]}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.strong,{children:"block statement"})," is just a bunch of Java statements wrapped up inside ",(0,a.jsx)(n.code,{children:"{}"})," curly braces. Why? Because sometimes Java needs you to use a single statement, but you have a ",(0,a.jsx)(n.em,{children:"whole"})," bunch of them. So, put them in a block, and boom \ud83d\udca5\u2014problem solved!"]}),"\n",(0,a.jsx)(n.h3,{id:"-example",children:"\ud83d\udccc Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"{\n    int var = 20;\n    var++;\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Simple, right? The statements inside ",(0,a.jsx)(n.code,{children:"{}"})," are treated as ",(0,a.jsx)(n.strong,{children:"one"}),". Like a coding burrito \ud83c\udf2f\u2014all ingredients wrapped up nicely together."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-scope-of-variables-inside-blocks-\ufe0f",children:"\ud83d\udd0d Scope of Variables Inside Blocks \ud83d\udd75\ufe0f"}),"\n",(0,a.jsxs)(n.p,{children:["Java is a bit territorial. If you declare a variable inside a block, it ",(0,a.jsx)(n.strong,{children:"stays"})," inside that block. It won\u2019t be available outside\u2014kind of like a top-secret club! \ud83e\udd2b"]}),"\n",(0,a.jsx)(n.h3,{id:"-example-of-scope-violation-",children:"\u274c Example of Scope Violation \ud83d\udeab"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"{\n    int var = 20;\n    var++;\n}\n\n// Oh no! Java says NOPE! \ud83d\udea8\nSystem.out.println(var); // ERROR: var is out of scope!\n"})}),"\n",(0,a.jsxs)(n.p,{children:["See? ",(0,a.jsx)(n.code,{children:"var"})," was declared inside the block, so Java refuses to acknowledge its existence outside of it. Typical Java. \ud83d\ude05"]}),"\n",(0,a.jsx)(n.h3,{id:"\ufe0f-nested-blocks",children:"\ud83c\udfd7\ufe0f Nested Blocks"}),"\n",(0,a.jsxs)(n.p,{children:["You can ",(0,a.jsx)(n.strong,{children:"nest"})," blocks inside each other (like Russian dolls! \ud83c\udfad). Inner blocks can access variables from outer blocks, but outer blocks ",(0,a.jsx)(n.em,{children:"cannot"})," access variables from inner blocks. It\u2019s like a VIP lounge\u2014higher-ups can enter, but the interns can\u2019t sneak into the executive suite. \ud83d\ude06"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-blocks-during-object-creation",children:"\ud83d\ude80 Blocks During Object Creation"}),"\n",(0,a.jsx)(n.p,{children:"Here\u2019s where things get spicy! \ud83c\udf36\ufe0f"}),"\n",(0,a.jsxs)(n.p,{children:["Block statements don\u2019t have to live inside methods! You can also use them inside ",(0,a.jsx)(n.strong,{children:"classes"})," to handle initialization logic."]}),"\n",(0,a.jsx)(n.h3,{id:"-non-static-vs-static-blocks",children:"\ud83d\udd25 Non-Static vs Static Blocks"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Non-static blocks"})," \u2192 Run ",(0,a.jsx)(n.strong,{children:"every time"})," you create a new object. \ud83d\udd04"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Static blocks"})," \u2192 Run ",(0,a.jsx)(n.strong,{children:"only once"})," when the class is loaded. \ud83d\ude80"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'public class MyDemoAction {\n    private Integer variable = 10;\n\n    public MyDemoAction() {\n        System.out.println("MyDemoAction Constructor");\n    }\n\n    {\n        // Non-static block statement - runs every time an object is created!\n        System.out.println("Hello from a non-static block! \ud83c\udfd7\ufe0f");\n    }\n\n    static {\n        // Static block statement - runs only once when the class loads!\n        System.out.println("Hello from a static block! \ud83d\ude80");\n    }\n\n    private void someMethod() {\n        System.out.println("HowToDoInJava.com");\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"-what-happens-when-you-run-this",children:"\ud83d\udca1 What Happens When You Run This?"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["The static block executes ",(0,a.jsx)(n.strong,{children:"first"})," (only once)."]}),"\n",(0,a.jsxs)(n.li,{children:["Each time you create an object, the ",(0,a.jsx)(n.strong,{children:"non-static block"})," runs before the constructor."]}),"\n",(0,a.jsx)(n.li,{children:"Finally, the constructor runs."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["This is Java\u2019s way of making sure certain setup tasks are done, ",(0,a.jsx)(n.strong,{children:"with or without"})," creating an object! \ud83c\udfa9\u2728"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-the-takeaway",children:"\ud83c\udfaf The Takeaway"}),"\n",(0,a.jsxs)(n.p,{children:["That\u2019s all, folks! Now you know how to use ",(0,a.jsx)(n.strong,{children:"block statements"})," like a pro! \ud83c\udfc6"]}),"\n",(0,a.jsxs)(n.p,{children:["\u2705 Use ",(0,a.jsx)(n.code,{children:"{}"})," to group multiple statements into one.\n\u2705 Remember: variables inside a block ",(0,a.jsx)(n.strong,{children:"stay inside"})," the block.\n\u2705 Static blocks run ",(0,a.jsx)(n.strong,{children:"once"}),", while non-static blocks run ",(0,a.jsx)(n.strong,{children:"every time"})," an object is created."]}),"\n",(0,a.jsx)(n.p,{children:"Hope you had fun learning! Happy coding! \ud83d\ude80\ud83c\udf89"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},4769:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/banner-java-icon-0ae50e2293ff72244732cfbb42e27ed7.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(6540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);